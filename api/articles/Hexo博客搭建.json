{"title":"Hexo+Github部署博客","slug":"Hexo博客搭建","date":"2020-02-08T05:28:30.000Z","updated":"2020-03-17T04:32:33.417Z","comments":true,"path":"api/articles/Hexo博客搭建.json","excerpt":null,"covers":["/images/loading.gif","/images/loading.gif","/images/loading.gif","/images/loading.gif","/images/loading.gif","/images/loading.gif","/images/loading.gif","/images/loading.gif","/images/loading.gif","/images/loading.gif","/images/loading.gif","/images/loading.gif","/images/loading.gif","/images/loading.gif","/images/loading.gif"],"content":"<h1 id=\"Hexo搭建个人博客\"><a href=\"#Hexo搭建个人博客\" class=\"headerlink\" title=\"Hexo搭建个人博客\"></a>Hexo搭建个人博客</h1><h2 id=\"简单开始\"><a href=\"#简单开始\" class=\"headerlink\" title=\"简单开始\"></a>简单开始</h2><p><b>如果你不想那么麻烦，想偷懒的话，不妨直接</b></p>\n<h3 id=\"下载-Git\"><a href=\"#下载-Git\" class=\"headerlink\" title=\"下载 Git\"></a>下载 <a href=\"https://git-scm.com/downloads\" target=\"_blank\" rel=\"noopener\">Git</a></h3><p>鼠标右键可以看到Git Bash Here 即可</p>\n<h3 id=\"下载node-js\"><a href=\"#下载node-js\" class=\"headerlink\" title=\"下载node.js\"></a>下载<a href=\"https://nodejs.org/en/download/\" target=\"_blank\" rel=\"noopener\">node.js</a></h3><p>cmd下npm -v有输出即可</p>\n<h3 id=\"设置镜像源\"><a href=\"#设置镜像源\" class=\"headerlink\" title=\"设置镜像源\"></a>设置镜像源</h3><p>创建一个存放博客的文件夹，进入文件夹，右键选择 Git Bash Here，然后设置<code>npm</code>的镜像源为淘宝镜像源，这样能<strong>加快下载插件速度</strong></p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">$ npm config set registry https://registry.npm.taobao.org<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"配置Git账户和邮箱\"><a href=\"#配置Git账户和邮箱\" class=\"headerlink\" title=\"配置Git账户和邮箱\"></a>配置Git账户和邮箱</h3><p>在你的博客文件夹下右键Git Bash Here</p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">$ git config --global user.name \"UserID\" \n$ git config --global user.email \"email-address\"<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><strong>这里的账号和邮箱换成你自己的</strong></p>\n<h3 id=\"生成ssh密钥\"><a href=\"#生成ssh密钥\" class=\"headerlink\" title=\"生成ssh密钥\"></a>生成ssh密钥</h3><p>这里三次回车即可</p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">$ ssh-keygen -t rsa -C \"email-address\"<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><strong>邮箱同样换成自己的</strong></p>\n<h3 id=\"密钥上传到Github\"><a href=\"#密钥上传到Github\" class=\"headerlink\" title=\"密钥上传到Github\"></a>密钥上传到Github</h3><pre class=\"line-numbers language-shell\"><code class=\"language-shell\">$ cat ~/.ssh/id_rsa.pub<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>登录GitHub网站点右上角<code>Settings-&gt;SSH and GPG Keys</code>,新建一个<code>key</code>,将上面的结果复制填进去就好了</p>\n<h3 id=\"测试是否上传成功\"><a href=\"#测试是否上传成功\" class=\"headerlink\" title=\"测试是否上传成功\"></a>测试是否上传成功</h3><p>下面的指令的输出能看到你<code>Github</code>账户名字就行了</p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">$ ssh -T git@github.com<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"克隆项目\"><a href=\"#克隆项目\" class=\"headerlink\" title=\"克隆项目\"></a>克隆项目</h3><p>在你的博客文件夹下,右键选择 Git Bash Here，然后</p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">$ git clone git@github.com:axh2018/hexo_blog.git   .    #克隆项目\n$ npm i                                                #安装依赖插件和框架<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h3 id=\"测试hexo\"><a href=\"#测试hexo\" class=\"headerlink\" title=\"测试hexo\"></a>测试hexo</h3><pre class=\"line-numbers language-shell\"><code class=\"language-shell\">$ hexo clean && hexo g && hexo s<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>打开浏览器127.0.0.1:4000，就可以本地预览效果 </p>\n<p><a href=\"https://axh2018.gitee.io/\" target=\"_blank\" rel=\"noopener\">点击预览https://axh2018.gitee.io/</a></p>\n<blockquote>\n<p>hexo  clean (清除缓存文件,可简写hexo cl)</p>\n</blockquote>\n<blockquote>\n<p>hexo generate (生成网页,可简写hexo g)</p>\n</blockquote>\n<blockquote>\n<p>hexo server (本地预览,可简写hexo s)</p>\n</blockquote>\n<blockquote>\n<p>hexo deploy (部署到GitHub,可简写hexo d)</p>\n</blockquote>\n<h3 id=\"部署到Github\"><a href=\"#部署到Github\" class=\"headerlink\" title=\"部署到Github\"></a>部署到Github</h3><p>能本地预览的话，就可以把相关信息改为自己的然后部署到<code>GitHub</code><br><code>Github</code>创建一个仓库，这个仓库的名字必须是 userid.github.io<br>例如我的id是axh2018，那么我的仓库名就必须是axh2018.github.io </p>\n<p>部署到<code>Github</code>,修改你博客文件夹根目录下的<code>_config.yaml</code>文件的倒数第二行,<code>repository</code>的地址改成你的<code>GitHub</code>博客仓库地址</p>\n<p>例如我的：</p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">deploy:\ntype: git\nrepository: https://github.com/axh2018/axh2018.github.io\nbranch: master<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>到这基本就完成了，剩下你所需要的工作就是把配置文件(根目录下的_config.yaml和主题文件夹下的_config_yaml)的相关信息改为你自己的信息即可。</strong></p>\n<h2 id=\"前提准备：\"><a href=\"#前提准备：\" class=\"headerlink\" title=\"前提准备：\"></a>前提准备：</h2><h3 id=\"下载node-js-1\"><a href=\"#下载node-js-1\" class=\"headerlink\" title=\"下载node.js\"></a>下载node.js</h3><blockquote>\n<p>Node.js 是一个基于 Chrome V8 引擎的 <a href=\"https://baike.baidu.com/item/JavaScript/321142\" target=\"_blank\" rel=\"noopener\">JavaScript</a> 运行环境。 Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型。Node 是一个让 JavaScript 运行在<a href=\"https://baike.baidu.com/item/服务端/6492316\" target=\"_blank\" rel=\"noopener\">服务端</a>的开发平台，它让 JavaScript 成为与<a href=\"https://baike.baidu.com/item/PHP/9337\" target=\"_blank\" rel=\"noopener\">PHP</a>、<a href=\"https://baike.baidu.com/item/Python/407313\" target=\"_blank\" rel=\"noopener\">Python</a>、<a href=\"https://baike.baidu.com/item/Perl/851577\" target=\"_blank\" rel=\"noopener\">Perl</a>、<a href=\"https://baike.baidu.com/item/Ruby/11419\" target=\"_blank\" rel=\"noopener\">Ruby</a> 等服务端语言平起平坐的<a href=\"https://baike.baidu.com/item/脚本语言/1379708\" target=\"_blank\" rel=\"noopener\">脚本语言</a>。发布于2009年5月，由Ryan Dahl开发，实质是对Chrome V8引擎进行了封装。</p>\n<p>Node对一些特殊用例进行优化，提供替代的<a href=\"https://baike.baidu.com/item/API/10154\" target=\"_blank\" rel=\"noopener\">API</a>，使得V8在非浏览器环境下运行得更好。V8引擎执行Javascript的速度非常快，性能非常好。Node是一个基于Chrome JavaScript运行时建立的平台， 用于方便地搭建响应速度快、易于扩展的网络应用。Node 使用<a href=\"https://baike.baidu.com/item/事件驱动/9597519\" target=\"_blank\" rel=\"noopener\">事件驱动</a>， 非阻塞<a href=\"https://baike.baidu.com/item/I%2FO/84718\" target=\"_blank\" rel=\"noopener\">I/O</a> 模型而得以轻量和高效，非常适合在分布式设备上运行数据密集型的实时应用。</p>\n</blockquote>\n<p><img src=\"/images/loading.gif\" data-original=\"https://raw.githubusercontent.com/axh2018/picgo_picture/master/20200222185614.png\" alt=\"\"></p>\n<p>如图，cmd下输入node -v有版本号即可。</p>\n<h3 id=\"下载Git\"><a href=\"#下载Git\" class=\"headerlink\" title=\"下载Git\"></a>下载Git</h3><blockquote>\n<p>Git(读音为/gɪt/。)是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。 Git 是 [Linus Torvalds](<a href=\"https://baike.baidu.com/item/Linus\" target=\"_blank\" rel=\"noopener\">https://baike.baidu.com/item/Linus</a> Torvalds/9336769) 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。</p>\n<p>Torvalds 开始着手开发 Git 是为了作为一种过渡方案来替代 BitKe</p>\n</blockquote>\n<p><img src=\"/images/loading.gif\" data-original=\"https://raw.githubusercontent.com/axh2018/picgo_picture/master/20200222185835.png\" alt=\"\"></p>\n<p>如图，鼠标右键能看见Git Bash Here和Git GUI Here即可。</p>\n<h3 id=\"GitHub账号\"><a href=\"#GitHub账号\" class=\"headerlink\" title=\"GitHub账号\"></a>GitHub账号</h3><blockquote>\n<p>GitHub是一个面向<a href=\"https://baike.baidu.com/item/开源/20720669\" target=\"_blank\" rel=\"noopener\">开源</a>及私有<a href=\"https://baike.baidu.com/item/软件/12053\" target=\"_blank\" rel=\"noopener\">软件</a>项目的托管平台，因为只支持git 作为唯一的版本库格式进行托管，故名GitHub。</p>\n<p>GitHub于2008年4月10日正式上线，除了Git代码仓库托管及基本的 Web管理界面以外，还提供了订阅、讨论组、文本渲染、在线文件编辑器、协作图谱（报表）、代码片段分享（Gist）等功能。目前，其注册用户已经超过350万，托管版本数量也是非常之多，其中不乏知名开源项目 <a href=\"https://baike.baidu.com/item/Ruby/11419\" target=\"_blank\" rel=\"noopener\">Ruby</a> on Rails、<a href=\"https://baike.baidu.com/item/jQuery/5385065\" target=\"_blank\" rel=\"noopener\">jQuery</a>、<a href=\"https://baike.baidu.com/item/python/407313\" target=\"_blank\" rel=\"noopener\">python</a> 等。</p>\n</blockquote>\n<blockquote>\n<p>2018年6月4日，微软宣布，通过75亿美元的股票交易收购代码托管平台GitHub。</p>\n</blockquote>\n<h2 id=\"开始搭建\"><a href=\"#开始搭建\" class=\"headerlink\" title=\"开始搭建\"></a>开始搭建</h2><h3 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h3><p>首先创建一个放置博客的文件夹，进入文件夹，右键Git Bash Here，输入下面的指令，添加国内镜像源,加快下载插件速度</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> config <span class=\"token keyword\">set</span> registry https://registry.npm.taobao.org<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>注：这条指令输入后并不会有任何输出，别以为是出错了。</p>\n<blockquote>\n<p>Hexo 是一个快速、简洁且高效的博客框架。</p>\n<p>Hexo 使用 <a href=\"http://daringfireball.net/projects/markdown/\" target=\"_blank\" rel=\"noopener\">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>\n<p>快速、简洁且高效的博客框架,Node.js 所带来的超快生成速度，让上百个页面在几秒内瞬间完成渲染。</p>\n<p>只需一条指令即可部署到 GitHub Pages, Heroku 或其他网站。</p>\n<p>Hexo 拥有强大的插件系统，安装插件可以让 Hexo 支持 Jade, CoffeeScript。</p>\n</blockquote>\n<p>同样，在博客文件夹下，右键Git Bash Here，输入</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span>  <span class=\"token function\">install</span> -g hexo-cli<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>可以输入<code>hexo -v</code>验证是否安装成功，输出版本号即可。</p>\n<p><img src=\"/images/loading.gif\" data-original=\"https://raw.githubusercontent.com/axh2018/picgo_picture/master/20200222191436.png\" alt=\"\"></p>\n<p>Hexo初始化</p>\n<p>同样，在博客文件夹下，右键Git Bash Here，输入</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">$ hexo init <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"/images/loading.gif\" data-original=\"https://raw.githubusercontent.com/axh2018/picgo_picture/master/20200222192829.png\" alt=\"\"></p>\n<p>Hexo初始化后 ，有以下几个文件/文件夹。</p>\n<ul>\n<li><code>scaffolds：</code>生成文章的一些模板 </li>\n<li><code>source：</code>用来存放你的文章</li>\n<li><code>themes：</code>主题</li>\n<li>.<code>gitignore</code> Git忽略文件夹</li>\n<li><code>_config.yml:</code> 博客的配置文件</li>\n<li><code>package.json</code>  所需模块</li>\n<li><code>node_modules:</code> 依赖包</li>\n<li><code>package-lock.json</code> 记录了模块下载地址</li>\n</ul>\n<p><img src=\"/images/loading.gif\" data-original=\"https://raw.githubusercontent.com/axh2018/picgo_picture/master/20200222192929.png\" alt=\"\"></p>\n<h3 id=\"安装依赖插件\"><a href=\"#安装依赖插件\" class=\"headerlink\" title=\"安装依赖插件\"></a>安装依赖插件</h3><p>同样，在博客文件夹下，右键Git Bash Here，输入</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> intall <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"/images/loading.gif\" data-original=\"https://raw.githubusercontent.com/axh2018/picgo_picture/master/20200222193359.png\" alt=\"\"></p>\n<h3 id=\"测试运行\"><a href=\"#测试运行\" class=\"headerlink\" title=\"测试运行\"></a>测试运行</h3><pre class=\"line-numbers language-bash\"><code class=\"language-bash\">$ hexo generate      <span class=\"token comment\" spellcheck=\"true\">#或者简写hexo g</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>此时你的博客文件夹根目录下下，会生成一个<code>pubic</code>文件夹，里面存放了生成的页面。</p>\n<p><img src=\"/images/loading.gif\" data-original=\"https://raw.githubusercontent.com/axh2018/picgo_picture/master/20200222205522.png\" alt=\"\"></p>\n<h3 id=\"本地预览效果\"><a href=\"#本地预览效果\" class=\"headerlink\" title=\"本地预览效果\"></a>本地预览效果</h3><pre class=\"line-numbers language-bash\"><code class=\"language-bash\">$ hexo server        <span class=\"token comment\" spellcheck=\"true\">#或者简写hexo s</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>打开浏览器，输入<code>127.0.0.1:4000</code>  即可预览本地效果</p>\n<p><img src=\"/images/loading.gif\" data-original=\"https://raw.githubusercontent.com/axh2018/picgo_picture/master/20200222205654.png\" alt=\"\"></p>\n<h3 id=\"部署到Github-1\"><a href=\"#部署到Github-1\" class=\"headerlink\" title=\"部署到Github\"></a>部署到Github</h3><h4 id=\"创建博客仓库\"><a href=\"#创建博客仓库\" class=\"headerlink\" title=\"创建博客仓库\"></a>创建博客仓库</h4><p><img src=\"/images/loading.gif\" data-original=\"https://raw.githubusercontent.com/axh2018/picgo_picture/master/20200222210439.png\" alt=\"\"></p>\n<p>需要 注意的是，仓库名有要求,要创建一个和你用户名相同的仓库，后面加<code>github.io</code>，只有这样，将来要部署到GitHub page的时候，才会被识别，也就是<a href=\"http://xxxx.github.io，其中xxx就是你注册`GitHub`的用户名。例如我的GitHub\" target=\"_blank\" rel=\"noopener\">http://xxxx.github.io，其中xxx就是你注册`GitHub`的用户名。例如我的GitHub</a> id为axh2018，那么我的仓库名必须为axh2018.github.io</p>\n<p><img src=\"/images/loading.gif\" data-original=\"https://raw.githubusercontent.com/axh2018/picgo_picture/master/20200222211048.png\" alt=\"\"></p>\n<h4 id=\"生成SSH密钥\"><a href=\"#生成SSH密钥\" class=\"headerlink\" title=\"生成SSH密钥\"></a>生成SSH密钥</h4><p>博客文件夹根目录下，右键Git Bash Here，输入</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span>  config --global  user.name    <span class=\"token string\">\"githubid\"</span>\n$ <span class=\"token function\">git</span>  config --global  user.email     <span class=\"token string\">\"email\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>这里<code>id</code>和<code>email</code>换成你自己的信息，然后生成<code>ssh</code>密钥</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">$ ssh-keygen  -t rsa -C <span class=\"token string\">\"email\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"/images/loading.gif\" data-original=\"https://raw.githubusercontent.com/axh2018/picgo_picture/master/20200222215028.png\" alt=\"\"></p>\n<p>这个时候在你的家目录下会生成一个<code>.ssh</code>文件夹，里面会有两个密钥，而你要做的，是将其中一个上传到<code>Github</code></p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">cat</span>  ~/.ssh/id_rsa.pub<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"/images/loading.gif\" data-original=\"https://raw.githubusercontent.com/axh2018/picgo_picture/master/20200222215154.png\" alt=\"\"></p>\n<p>将输入的内容复制，打开Github右上角的Settings,找到<code>SSH and GPG keys</code>，然后新建一个<code>key</code>，<code>key</code>的名字随意填一个，内容即刚复制的内容。</p>\n<p><img src=\"/images/loading.gif\" data-original=\"https://raw.githubusercontent.com/axh2018/picgo_picture/master/20200222215350.png\" alt=\"\"></p>\n<p>输入 <code>ssh -T git@github.com</code>,如果输出你的<code>id</code>，即验证成功。</p>\n<p><img src=\"/images/loading.gif\" data-original=\"https://raw.githubusercontent.com/axh2018/picgo_picture/master/20200222215811.png\" alt=\"\"></p>\n<h4 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h4><p>此时，大部分工作已经做完了，接下来就是将<code>hexo g</code>生成的静态页面上传到GitHub上。</p>\n<ul>\n<li><p>安装deploy-git 插件</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> <span class=\"token function\">install</span> hexo-deployer-git --save<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n</ul>\n<p><img src=\"/images/loading.gif\" data-original=\"https://raw.githubusercontent.com/axh2018/picgo_picture/master/20200222234213.png\" alt=\"\"></p>\n<ul>\n<li><p>修改_config.yaml文件最后几行</p>\n<pre class=\"line-numbers language-yml\"><code class=\"language-yml\">   deploy:\n     type: git\n     repository: https://github.com/axh2018/axh2018.github.io\n     branch: master<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>部署到GIthub</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">   $ hexo clean        <span class=\"token comment\" spellcheck=\"true\">#删除原来生成的pubic文件夹</span>\n   $ hexo g            <span class=\"token comment\" spellcheck=\"true\">#生成新的页面</span>\n   $ hexo d            <span class=\"token comment\" spellcheck=\"true\">#部署到GitHub</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</li>\n</ul>\n<p>​    部署成功后可以通过  <a href=\"https://userid.github.io访问\" target=\"_blank\" rel=\"noopener\">https://userid.github.io访问</a></p>\n<h4 id=\"layout布局\"><a href=\"#layout布局\" class=\"headerlink\" title=\"layout布局\"></a>layout布局</h4><p>你新建一篇文章时：</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">$ hexo new XXX<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>它其实默认使用的是<code>post</code>这个布局，也就是在<code>source</code>文件夹下的<code>_post</code>里面。</p>\n<p><code>Hexo</code>有三种默认布局：<code>post</code>、<code>page</code>和<code>draft</code>，它们分别对应不同的路径，而您自定义的其他布局和<code>post</code>相同，都将储存到<code>source/_posts</code>文件夹。</p>\n<p>而new这个命令其实是：</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">$ hexo new <span class=\"token punctuation\">[</span>layout<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span>title<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>只不过这个<code>layout</code>默认是<code>post</code>罢了。</p>\n<p>如果你想另起一页，那么可以使用</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">$ hexo new page newpage<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>系统会自动给你在<code>source</code>文件夹下创建一个<code>newpage</code>文件夹，以及<code>newpage</code>文件夹中的<code>index.md</code>，这样你访问的<code>newpage</code>对应的链接就是<a href=\"http://xxx.xxx/newpage\" target=\"_blank\" rel=\"noopener\">http://xxx.xxx/newpage</a></p>\n<p><code>draft</code>是草稿的意思，也就是你如果想写文章，又不希望被看到，那么可以</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">$ hexo new draft newdraft<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>这样会在<code>source/_draft</code>中新建一个<code>newdraft.md</code>文件，如果你的草稿文件写的过程中，想要预览一下，那么可以使用</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">$ hexo server --draft<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>在本地端口中开启服务预览。</p>\n<p>如果你的草稿文件写完了，想要发表到<code>post</code>中，</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">$ hexo publish draft newdraft<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>就会自动把<code>newdraft.md</code>发送到<code>post</code>中。</p>\n<h2 id=\"定制\"><a href=\"#定制\" class=\"headerlink\" title=\"定制\"></a>定制</h2><h3 id=\"主题更换\"><a href=\"#主题更换\" class=\"headerlink\" title=\"主题更换\"></a>主题更换</h3><p>进入博客根目录下，右键Git Bash G+Here，执行下面的指令</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> clone -b develop https://github.com/blinkfox/hexo-theme-matery themes/matery<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>此时主题文件夹下会多出一个matery主题。</p>\n<p>然后再更改根目录下的_config.yml配置文件。找到<code>themes:</code>，将他的值改为<code>matery</code>。</p>\n<p>此时你可以<code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</code></p>\n<p>本地预览<code>matery</code>主题的效果</p>\n<p>关于<code>matery</code>主题：</p>\n<blockquote>\n<p>这是一个采用 <code>Material Design</code> 和响应式设计的 Hexo 博客主题</p>\n<p>QQ 交流群1（已满）: <code>926552981</code> | QQ 交流群2（推荐）: <code>971887688</code></p>\n</blockquote>\n<p>特性：</p>\n<ul>\n<li>简单漂亮，文章内容美观易读</li>\n<li><a href=\"https://material.io/\" target=\"_blank\" rel=\"noopener\">Material Design</a> 设计</li>\n<li>响应式设计，博客在桌面端、平板、手机等设备上均能很好的展现</li>\n<li>首页轮播文章及每天动态切换 <code>Banner</code> 图片</li>\n<li>瀑布流式的博客文章列表（文章无特色图片时会有 <code>24</code> 张漂亮的图片代替）</li>\n<li>时间轴式的归档页</li>\n<li><strong>词云</strong>的标签页和<strong>雷达图</strong>的分类页</li>\n<li>丰富的关于我页面（包括关于我、文章统计图、我的项目、我的技能、相册等）</li>\n<li>可自定义的数据的友情链接页面</li>\n<li>支持文章置顶和文章打赏</li>\n<li>支持 <code>MathJax</code></li>\n<li><code>TOC</code> 目录</li>\n<li>可设置复制文章内容时追加版权信息</li>\n<li>可设置阅读文章时做密码验证</li>\n<li><a href=\"https://gitalk.github.io/\" target=\"_blank\" rel=\"noopener\">Gitalk</a>、<a href=\"https://imsun.github.io/gitment/\" target=\"_blank\" rel=\"noopener\">Gitment</a>、<a href=\"https://valine.js.org/\" target=\"_blank\" rel=\"noopener\">Valine</a> 和 <a href=\"https://disqus.com/\" target=\"_blank\" rel=\"noopener\">Disqus</a> 评论模块（推荐使用 <code>Gitalk</code>）</li>\n<li>集成了<a href=\"http://busuanzi.ibruce.info/\" target=\"_blank\" rel=\"noopener\">不蒜子统计</a>、谷歌分析（<code>Google Analytics</code>）和文章字数统计等功能</li>\n<li>支持在首页的音乐播放和视频播放功能</li>\n<li>支持<code>emoji</code>表情，用<code>markdown emoji</code>语法书写直接生成对应的能<strong>跳跃</strong>的表情。</li>\n<li>支持 <a href=\"http://www.daovoice.io/\" target=\"_blank\" rel=\"noopener\">DaoVoice</a>、<a href=\"https://www.tidio.com/\" target=\"_blank\" rel=\"noopener\">Tidio</a> 在线聊天功能。</li>\n</ul>\n<h3 id=\"新建分类categories\"><a href=\"#新建分类categories\" class=\"headerlink\" title=\"新建分类categories\"></a>新建分类categories</h3><p><code>categories</code> 页是用来展示所有分类的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>categories/index.md</code> 文件，那么你就需要新建一个，命令如下：</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">$ hexo new page <span class=\"token string\">\"categories\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>编辑你刚刚新建的页面文件 <code>/source/categories/index.md</code>，至少需要以下内容：</p>\n<pre><code>---\ntitle: categories\ndate: 2018-09-30 17:25:30\ntype: \"categories\"\nlayout: \"categories\"\n---</code></pre><h3 id=\"新建标签-tags-页\"><a href=\"#新建标签-tags-页\" class=\"headerlink\" title=\"新建标签 tags 页\"></a>新建标签 tags 页</h3><p><code>tags</code> 页是用来展示所有标签的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>tags/index.md</code> 文件，那么你就需要新建一个，命令如下：</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">$ hexo new page <span class=\"token string\">\"tags\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>编辑你刚刚新建的页面文件 <code>/source/tags/index.md</code>，至少需要以下内容：</p>\n<pre><code>---\ntitle: tags\ndate: 2018-09-30 18:23:38\ntype: \"tags\"\nlayout: \"tags\"\n---</code></pre><h3 id=\"新建about关于我页\"><a href=\"#新建about关于我页\" class=\"headerlink\" title=\"新建about关于我页\"></a>新建about关于我页</h3><p><code>about</code> 页是用来展示<strong>关于我和我的博客</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>about/index.md</code> 文件，那么你就需要新建一个，命令如下：</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">$ hexo new page <span class=\"token string\">\"about\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>编辑你刚刚新建的页面文件 <code>/source/about/index.md</code>，至少需要以下内容：</p>\n<pre><code>---\ntitle: about\ndate: 2018-09-30 17:25:30\ntype: \"about\"\nlayout: \"about\"\n---</code></pre><h3 id=\"新建留言板contact页\"><a href=\"#新建留言板contact页\" class=\"headerlink\" title=\"新建留言板contact页\"></a>新建留言板contact页</h3><p><code>contact</code> 页是用来展示<strong>留言板</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>contact/index.md</code> 文件，那么你就需要新建一个，命令如下：</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">$ hexo new page <span class=\"token string\">\"contact\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>编辑你刚刚新建的页面文件 <code>/source/contact/index.md</code>，至少需要以下内容：</p>\n<pre><code>---\ntitle: contact\ndate: 2018-09-30 17:25:30\ntype: \"contact\"\nlayout: \"contact\"\n---</code></pre><blockquote>\n<p><strong>注</strong>：本留言板功能依赖于第三方评论系统，请<strong>激活</strong>你的评论系统才有效果。并且在主题的 <code>_config.yml</code> 文件中，第 <code>19</code> 至 <code>21</code> 行的“<strong>菜单</strong>”配置，取消关于留言板的注释即可</p>\n</blockquote>\n<h3 id=\"新建友情链接friends页\"><a href=\"#新建友情链接friends页\" class=\"headerlink\" title=\"新建友情链接friends页\"></a>新建友情链接friends页</h3><p><code>friends</code> 页是用来展示<strong>友情连接</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>friends/index.md</code> 文件，那么你就需要新建一个，命令如下：</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">$ hexo new page <span class=\"token string\">\"friends\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>编辑你刚刚新建的页面文件 <code>/source/friends/index.md</code>，至少需要以下内容：</p>\n<pre><code>---\ntitle: friends\ndate: 2018-12-12 21:25:30\ntype: \"friends\"\nlayout: \"friends\"\n---</code></pre><p>同时，在你的博客 <code>source</code> 目录下新建 <code>_data</code> 目录，在 <code>_data</code> 目录中新建 <code>friends.json</code> 文件，文件内容如下所示：</p>\n<pre class=\"line-numbers language-json\"><code class=\"language-json\"><span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"avatar\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"http://image.luokangyuan.com/1_qq_27922023.jpg\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"码酱\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"introduction\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"我不是大佬，只是在追寻大佬的脚步\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"http://luokangyuan.com/\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"前去学习\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"avatar\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"http://image.luokangyuan.com/4027734.jpeg\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"闪烁之狐\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"introduction\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://blinkfox.github.io/\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"前去学习\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"avatar\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"http://image.luokangyuan.com/avatar.jpg\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ja_rome\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"introduction\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"平凡的脚步也可以走出伟大的行程\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://me.csdn.net/jlh912008548\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"前去学习\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"菜单导航配置\"><a href=\"#菜单导航配置\" class=\"headerlink\" title=\"菜单导航配置\"></a>菜单导航配置</h3><ul>\n<li>配置基本菜单导航的名称、路径url和图标icon.</li>\n</ul>\n<p>菜单导航名称可以是中文也可以是英文(如：<code>Index</code>或<code>主页</code>) 2.图标icon 可以在<a href=\"https://fontawesome.com/icons\" target=\"_blank\" rel=\"noopener\">Font Awesome</a> 中查找</p>\n<pre class=\"line-numbers language-yml\"><code class=\"language-yml\">menu:\n  Index:\n    url: /\n    icon: fas fa-home\n  Tags:\n    url: /tags\n    icon: fas fa-tags\n  Categories:\n    url: /categories\n    icon: fas fa-bookmark\n  Archives:\n    url: /archives\n    icon: fas fa-archive\n  About:\n    url: /about\n    icon: fas fa-user-circle\n  Friends:\n    url: /friends\n    icon: fas fa-address-book<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>二级菜单配置方法</li>\n</ul>\n<p>如果你需要二级菜单则可以在原基本菜单导航的基础上如下操作<br>1.在需要添加二级菜单的一级菜单下添加<code>children</code>关键字(如:<code>About</code>菜单下添加<code>children</code>)<br>2.在<code>children</code>下创建二级菜单的 名称name,路径url和图标icon.<br>3.注意每个二级菜单模块前要加 <code>-</code>.<br>4.注意缩进格式</p>\n<pre class=\"line-numbers language-yml\"><code class=\"language-yml\">menu:\n  Index:\n    url: /\n    icon: fas fa-home\n  Tags:\n    url: /tags\n    icon: fas fa-tags\n  Categories:\n    url: /categories\n    icon: fas fa-bookmark\n  Archives:\n    url: /archives\n    icon: fas fa-archive\n  About:\n    url: /about\n    icon: fas fa-user-circle-o\n  Friends:\n    url: /friends\n    icon: fas fa-address-book\n  Medias:\n    icon: fas fa-list\n    children:\n      - name: Musics\n        url: /musics\n        icon: fas fa-music\n      - name: Movies\n        url: /movies\n        icon: fas fa-film\n      - name: Books\n        url: /books\n        icon: fas fa-book\n      - name: Galleries\n        url: /galleries\n        icon: fas fa-image<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后就可以在文章中对应位置看到你用<code>emoji</code>语法写的表情了。</p>\n<h3 id=\"代码高亮\"><a href=\"#代码高亮\" class=\"headerlink\" title=\"代码高亮\"></a>代码高亮</h3><p>由于 Hexo 自带的代码高亮主题显示不好看，所以主题中使用到了 <a href=\"https://github.com/ele828/hexo-prism-plugin\" target=\"_blank\" rel=\"noopener\">hexo-prism-plugin</a> 的 Hexo 插件来做代码高亮，安装命令如下：</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> i -S hexo-prism-plugin<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>然后，修改 Hexo 根目录下 <code>_config.yml</code> 文件中 <code>highlight.enable</code> 的值为 <code>false</code>，并新增 <code>prism</code> 插件相关的配置，主要配置如下：</p>\n<pre class=\"line-numbers language-yml\"><code class=\"language-yml\">highlight:\n  enable: false\n\nprism_plugin:\n  mode: 'preprocess'    # realtime/preprocess\n  theme: 'tomorrow'\n  line_number: false    # default false\n  custom_css:<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"搜索\"><a href=\"#搜索\" class=\"headerlink\" title=\"搜索\"></a>搜索</h3><p>本主题中还使用到了 <a href=\"https://github.com/wzpan/hexo-generator-search\" target=\"_blank\" rel=\"noopener\">hexo-generator-search</a> 的 Hexo 插件来做内容搜索，安装命令如下：</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> <span class=\"token function\">install</span> hexo-generator-search --save<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p>\n<pre class=\"line-numbers language-yml\"><code class=\"language-yml\">search:\n  path: search.xml\n  field: post<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"中文链接转拼音\"><a href=\"#中文链接转拼音\" class=\"headerlink\" title=\"中文链接转拼音\"></a>中文链接转拼音</h3><p>如果你的文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文，这样不利于 <code>SEO</code>，且 <code>gitment</code> 评论对中文链接也不支持。我们可以用 <a href=\"https://github.com/viko16/hexo-permalink-pinyin\" target=\"_blank\" rel=\"noopener\">hexo-permalink-pinyin</a> Hexo 插件使在生成文章时生成中文拼音的永久链接。</p>\n<p>安装命令如下：</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> i hexo-permalink-pinyin --save<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p>\n<pre class=\"line-numbers language-yml\"><code class=\"language-yml\">permalink_pinyin:\n  enable: true\n  separator: '-' # default: '-'<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p><strong>注</strong>：除了此插件外，<a href=\"https://github.com/rozbo/hexo-abbrlink\" target=\"_blank\" rel=\"noopener\">hexo-abbrlink</a> 插件也可以生成非中文的链接。</p>\n</blockquote>\n<h3 id=\"文章字数统计插件\"><a href=\"#文章字数统计插件\" class=\"headerlink\" title=\"文章字数统计插件\"></a>文章字数统计插件</h3><p>如果你想要在文章中显示文章字数、阅读时长信息，可以安装 <a href=\"https://github.com/willin/hexo-wordcount\" target=\"_blank\" rel=\"noopener\">hexo-wordcount</a>插件。</p>\n<p>安装命令如下：</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> i --save hexo-wordcount<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>然后只需在本主题下的 <code>_config.yml</code> 文件中，将各个文章字数相关的配置激活即可：</p>\n<pre class=\"line-numbers language-yml\"><code class=\"language-yml\">postInfo:\n  date: true\n  update: false\n  wordCount: true # 设置文章字数统计为 true.\n  totalCount: true # 设置站点文章总字数统计为 true.\n  min2read: true # 阅读时长.\n  readCount: true # 阅读次数.<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"添加emoji表情支持\"><a href=\"#添加emoji表情支持\" class=\"headerlink\" title=\"添加emoji表情支持\"></a>添加emoji表情支持</h3><p>本主题新增了对<code>emoji</code>表情的支持，使用到了 <a href=\"https://npm.taobao.org/package/hexo-filter-github-emojis\" target=\"_blank\" rel=\"noopener\">hexo-filter-github-emojis</a> 的 Hexo 插件来支持 <code>emoji</code>表情的生成，把对应的<code>markdown emoji</code>语法（<code>::</code>,例如：<code>:smile:</code>）转变成会跳跃的<code>emoji</code>表情，安装命令如下：</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> <span class=\"token function\">install</span> hexo-filter-github-emojis --save<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p>\n<pre class=\"line-numbers language-yml\"><code class=\"language-yml\">githubEmojis:\n  enable: true\n  className: github-emoji\n  inject: true\n  styles:\n  customEmojis:<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"添加-RSS-订阅支持\"><a href=\"#添加-RSS-订阅支持\" class=\"headerlink\" title=\"添加 RSS 订阅支持\"></a>添加 RSS 订阅支持</h3><p>本主题中还使用到了 <a href=\"https://github.com/hexojs/hexo-generator-feed\" target=\"_blank\" rel=\"noopener\">hexo-generator-feed</a> 的 Hexo 插件来做 <code>RSS</code>，安装命令如下：</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> <span class=\"token function\">install</span> hexo-generator-feed --save<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p>\n<pre class=\"line-numbers language-yml\"><code class=\"language-yml\">feed:\n  type: atom\n  path: atom.xml\n  limit: 20\n  hub:\n  content:\n  content_limit: 140\n  content_limit_delim: ' '\n  order_by: -date<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后在 <code>public</code> 文件夹中即可看到 <code>atom.xml</code> 文件，说明你已经安装成功了。</p>\n<h3 id=\"添加-DaoVoice-在线聊天功能\"><a href=\"#添加-DaoVoice-在线聊天功能\" class=\"headerlink\" title=\"添加 DaoVoice 在线聊天功能\"></a>添加 <a href=\"http://www.daovoice.io/\" target=\"_blank\" rel=\"noopener\">DaoVoice</a> 在线聊天功能</h3><p>前往 <a href=\"http://www.daovoice.io/\" target=\"_blank\" rel=\"noopener\">DaoVoice</a> 官网注册并且获取 <code>app_id</code>，并将 <code>app_id</code> 填入主题的 <code>_config.yml</code> 文件中。</p>\n<h3 id=\"添加-Tidio-在线聊天功能\"><a href=\"#添加-Tidio-在线聊天功能\" class=\"headerlink\" title=\"添加 Tidio 在线聊天功能\"></a>添加 <a href=\"https://www.tidio.com/\" target=\"_blank\" rel=\"noopener\">Tidio</a> 在线聊天功能</h3><p>前往 <a href=\"https://www.tidio.com/\" target=\"_blank\" rel=\"noopener\">Tidio</a> 官网注册并且获取 <code>Public Key</code>，并将 <code>Public Key</code> 填入主题的 <code>_config.yml</code> 文件中。</p>\n<h3 id=\"修改页脚\"><a href=\"#修改页脚\" class=\"headerlink\" title=\"修改页脚\"></a>修改页脚</h3><p>页脚信息可能需要做定制化修改，而且它不便于做成配置信息，所以可能需要你自己去再修改和加工。修改的地方在主题文件的 <code>/layout/_partial/footer.ejs</code> 文件中，包括站点、使用的主题、访问量等。</p>\n<h3 id=\"修改社交链接\"><a href=\"#修改社交链接\" class=\"headerlink\" title=\"修改社交链接\"></a>修改社交链接</h3><p>在主题的 <code>_config.yml</code> 文件中，默认支持 <code>QQ</code>、<code>GitHub</code> 和邮箱等的配置，你可以在主题文件的 <code>/layout/_partial/social-link.ejs</code> 文件中，新增、修改你需要的社交链接地址，增加链接可参考如下代码：</p>\n<pre class=\"line-numbers language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>%</span> <span class=\"token attr-name\">if</span> <span class=\"token attr-name\">(theme.socialLink.github)</span> <span class=\"token attr-name\">{</span> <span class=\"token attr-name\">%</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>&lt;%<span class=\"token punctuation\">=</span> theme.socialLink.github %<span class=\"token punctuation\">></span><span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>tooltipped<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">target</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>_blank<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">data-tooltip</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>访问我的GitHub<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">data-position</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>top<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">data-delay</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>50<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>i</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>fab fa-github<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>i</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>%</span> <span class=\"token attr-name\">}</span> <span class=\"token attr-name\">%</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>其中，社交图标（如：<code>fa-github</code>）你可以在 <a href=\"https://fontawesome.com/icons\" target=\"_blank\" rel=\"noopener\">Font Awesome</a> 中搜索找到。以下是常用社交图标的标识，供你参考：</p>\n<ul>\n<li>Facebook: <code>fab fa-facebook</code></li>\n<li>Twitter: <code>fab fa-twitter</code></li>\n<li>Google-plus: <code>fab fa-google-plus</code></li>\n<li>Linkedin: <code>fab fa-linkedin</code></li>\n<li>Tumblr: <code>fab fa-tumblr</code></li>\n<li>Medium: <code>fab fa-medium</code></li>\n<li>Slack: <code>fab fa-slack</code></li>\n<li>Sina Weibo: <code>fab fa-weibo</code></li>\n<li>Wechat: <code>fab fa-weixin</code></li>\n<li>QQ: <code>fab fa-qq</code></li>\n<li>Zhihu: <code>fab fa-zhihu</code></li>\n</ul>\n<blockquote>\n<p><strong>注意</strong>: 本主题中使用的 <code>Font Awesome</code> 版本为 <code>5.11.0</code>。</p>\n</blockquote>\n<h3 id=\"修改打赏的二维码图片\"><a href=\"#修改打赏的二维码图片\" class=\"headerlink\" title=\"修改打赏的二维码图片\"></a>修改打赏的二维码图片</h3><p>在主题文件的 <code>source/medias/reward</code> 文件中，你可以替换成你的的微信和支付宝的打赏二维码图片。</p>\n<h3 id=\"文章加密\"><a href=\"#文章加密\" class=\"headerlink\" title=\"文章加密\"></a>文章加密</h3><p>主题 <code>config.yml</code> 配置文件中激活 <code>verifyPassword.enable: true</code> </p>\n<p>在你所需要加密的文章中的 <code>Front-Matter</code> 中添加 <code>password</code> 属性，<code>password</code>的值为你的原密码经过 SHA256 加密后的值。访问文章就需要输入密码了，输入的为原密码。</p>\n<h3 id=\"配置音乐播放器\"><a href=\"#配置音乐播放器\" class=\"headerlink\" title=\"配置音乐播放器\"></a>配置音乐播放器</h3><p>要支持音乐播放，在主题的 <code>_config.yml</code> 配置文件中激活music配置即可：</p>\n<pre class=\"line-numbers language-yml\"><code class=\"language-yml\">music:\n  enable: true\n  title: 听听音乐 #非吸底模式有效\n    enable: true\n    show: 听听音乐\n  server: netease   #require    music platform: netease, tencent, kugou, xiami, baidu\n  type: playlist    #require song, playlist, album, search, artist\n  id: 503838841     #require    song id / playlist id / album id / search keyword\n  fixed: false       # 开启吸底模式\n  autoplay: false   # 是否自动播放\n  theme: '#42b983'\n  loop: 'all'       # 音频循环播放, 可选值: 'all', 'one', 'none'\n  order: 'random'   # 音频循环顺序, 可选值: 'list', 'random'\n  preload: 'auto'   # 预加载，可选值: 'none', 'metadata', 'auto'\n  volume: 0.7       # 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效\n  listFolded: true  # 列表默认折叠<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p><code>server</code>可选网<code>netease</code>（网易云音乐），<code>tencent</code>（QQ音乐），<code>kugou</code>（酷狗音乐），<code>xiami</code>（虾米音乐），</p>\n<p><code>baidu</code>（百度音乐）。</p>\n<p><code>type</code>可选<code>song</code>（歌曲），<code>playlist</code>（歌单），<code>album</code>（专辑），<code>search</code>（搜索关键字），<code>artist</code>（歌手）</p>\n<p><code>id</code>获取方法：网页打开例如网易云音乐，点击一个推荐的歌单，地址栏会有一个<code>id</code>，<code>id</code>即为这串数字。其中search的id为搜索的关键字。</p>\n</blockquote>\n<h3 id=\"文章-Front-matter-介绍\"><a href=\"#文章-Front-matter-介绍\" class=\"headerlink\" title=\"文章 Front-matter 介绍\"></a>文章 Front-matter 介绍</h3><h3 id=\"Front-matter-选项详解\"><a href=\"#Front-matter-选项详解\" class=\"headerlink\" title=\"Front-matter 选项详解\"></a>Front-matter 选项详解</h3><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。但我仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p>\n<table>\n<thead>\n<tr>\n<th>配置选项</th>\n<th>默认值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>title</td>\n<td><code>Markdown</code> 的文件标题</td>\n<td>文章标题，强烈建议填写此选项</td>\n</tr>\n<tr>\n<td>date</td>\n<td>文件创建时的日期时间</td>\n<td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td>\n</tr>\n<tr>\n<td>author</td>\n<td>根 <code>_config.yml</code> 中的 <code>author</code></td>\n<td>文章作者</td>\n</tr>\n<tr>\n<td>img</td>\n<td><code>featureImages</code> 中的某个值</td>\n<td>文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td>\n</tr>\n<tr>\n<td>top</td>\n<td><code>true</code></td>\n<td>推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td>\n</tr>\n<tr>\n<td>cover</td>\n<td><code>false</code></td>\n<td><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td>\n</tr>\n<tr>\n<td>coverImg</td>\n<td>无</td>\n<td><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td>\n</tr>\n<tr>\n<td>password</td>\n<td>无</td>\n<td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td>\n</tr>\n<tr>\n<td>toc</td>\n<td><code>true</code></td>\n<td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td>\n</tr>\n<tr>\n<td>mathjax</td>\n<td><code>false</code></td>\n<td>是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td>\n</tr>\n<tr>\n<td>summary</td>\n<td>无</td>\n<td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td>\n</tr>\n<tr>\n<td>categories</td>\n<td>无</td>\n<td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td>\n</tr>\n<tr>\n<td>tags</td>\n<td>无</td>\n<td>文章标签，一篇文章可以多个标签</td>\n</tr>\n<tr>\n<td>keywords</td>\n<td>文章标题</td>\n<td>文章关键字，SEO 时需要</td>\n</tr>\n<tr>\n<td>reprintPolicy</td>\n<td>cc_by</td>\n<td>文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p><strong>注意</strong>:</p>\n<ol>\n<li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章都的特色图<strong>各有特色</strong>。</li>\n<li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li>\n<li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：<a href=\"http://tool.oschina.net/encrypt?type=2\" target=\"_blank\" rel=\"noopener\">开源中国在线工具</a>、<a href=\"http://encode.chahuo.com/\" target=\"_blank\" rel=\"noopener\">chahuo</a>、<a href=\"http://tool.chinaz.com/tools/hash.aspx\" target=\"_blank\" rel=\"noopener\">站长工具</a>。</li>\n<li>您可以在文章md文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则</li>\n</ol>\n</blockquote>\n<p>以下为文章的 <code>Front-matter</code> 示例。</p>\n<h3 id=\"最简示例\"><a href=\"#最简示例\" class=\"headerlink\" title=\"最简示例\"></a>最简示例</h3><pre class=\"line-numbers language-markdown\"><code class=\"language-markdown\"><span class=\"token hr punctuation\">---</span>\ntitle: typora-vue-theme主题介绍\n<span class=\"token title important\">date: 2018-09-07 09:25:00\n<span class=\"token punctuation\">---</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"最全示例\"><a href=\"#最全示例\" class=\"headerlink\" title=\"最全示例\"></a>最全示例</h3><pre class=\"line-numbers language-markdown\"><code class=\"language-markdown\"><span class=\"token hr punctuation\">---</span>\ntitle: typora-vue-theme主题介绍\ndate: 2018-09-07 09:25:00\nauthor: 赵奇\nimg: /source/images/xxx.jpg\ntop: true\ncover: true\ncoverImg: /images/1.jpg\npassword: 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92\ntoc: false\nmathjax: false\nsummary: 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要\ncategories: Markdown\ntags:\n  <span class=\"token list punctuation\">-</span> Typora\n  - <span class=\"token title important\">Markdown\n<span class=\"token punctuation\">---</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>在本主题的 <code>_config.yml</code> 中可以修改部分自定义信息，有以下几个部分：</p>\n<ul>\n<li>菜单</li>\n<li>我的梦想</li>\n<li>首页的音乐播放器和视频播放器配置</li>\n<li>是否显示推荐文章名称和按钮配置</li>\n<li><code>favicon</code> 和 <code>Logo</code></li>\n<li>个人信息</li>\n<li>TOC 目录</li>\n<li>文章打赏信息</li>\n<li>复制文章内容时追加版权信息</li>\n<li>MathJax</li>\n<li>文章字数统计、阅读时长</li>\n<li>点击页面的’爱心’效果</li>\n<li>我的项目</li>\n<li>我的技能</li>\n<li>我的相册</li>\n<li><code>Gitalk</code>、<code>Gitment</code>、<code>Valine</code> 和 <code>disqus</code> 评论配置</li>\n<li><a href=\"http://busuanzi.ibruce.info/\" target=\"_blank\" rel=\"noopener\">不蒜子统计</a>和谷歌分析（<code>Google Analytics</code>）</li>\n<li>默认特色图的集合。当文章没有设置特色图时，本主题会根据文章标题的 <code>hashcode</code> 值取余，来选择展示对应的特色图</li>\n</ul>\n<h3 id=\"修改主题颜色\"><a href=\"#修改主题颜色\" class=\"headerlink\" title=\"修改主题颜色\"></a>修改主题颜色</h3><p>主题会有一层变换的颜色笼罩在背景图上，在主题文件的 <code>/source/css/matery.css</code> 文件中，搜索 <code>.bg-color</code> 来修改背景颜色：</p>\n<pre class=\"line-numbers language-css\"><code class=\"language-css\"><span class=\"token comment\" spellcheck=\"true\">/* 整体背景颜色，包括导航、移动端的导航、页尾、标签页等的背景颜色. */</span>\n<span class=\"token selector\"><span class=\"token class\">.bg-color</span> </span><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token function\">linear-gradient</span><span class=\"token punctuation\">(</span>to right, <span class=\"token hexcode\">#4cbf30</span> <span class=\"token number\">0%</span>, <span class=\"token hexcode\">#0f9d58</span> <span class=\"token number\">100%</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@-webkit-keyframes</span> rainbow</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token comment\" spellcheck=\"true\">/* 动态切换背景颜色. */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@keyframes</span> rainbow</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">/* 动态切换背景颜色. */</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\" spellcheck=\"true\">/*如果不需要，可以将上面三个注释掉*/</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>如果不需要的话，直接将上面三个注释掉即可。</p>\n<h3 id=\"修改-banner-图和文章特色图\"><a href=\"#修改-banner-图和文章特色图\" class=\"headerlink\" title=\"修改 banner 图和文章特色图\"></a>修改 banner 图和文章特色图</h3><p>你可以直接在 <code>/source/medias/banner</code> 文件夹中更换你喜欢的 <code>banner</code> 图片，主题代码中是每天切换一张，只需 <code>7</code> 张即可。如果你会 <code>JavaScript</code> 代码，可以修改成你自己喜欢切换逻辑，如：随机切换等，<code>banner</code> 切换的代码位置在 <code>/layout/_partial/bg-cover-content.ejs</code> 文件的 `` 代码中：</p>\n<pre class=\"line-numbers language-html\"><code class=\"language-html\">$('.bg-cover').css('background-image', 'url(/medias/banner/' + new Date().getDay() + '.jpg)');<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>如想每小时切换,将<code>getDay()</code>改为<code>getHours()</code>即可,但是需要增加图片的数量为24，且在_config.yml中做修改相应。</p>\n<p>在 <code>/source/medias/featureimages</code> 文件夹中默认有 24 张特色图片，你可以再增加或者减少，并需要在 <code>_config.yml</code> 做同步修改。</p>\n<h3 id=\"添加文章评论插件\"><a href=\"#添加文章评论插件\" class=\"headerlink\" title=\"添加文章评论插件\"></a>添加文章评论插件</h3><p>主题自带<code>gittalk</code>,<code>gitment</code>,<code>valine</code>等评论插件，只需要去相应的官网注册，然后将相应的配置填入到主题的<code>_config.yml</code>中相应位置即可。</p>\n<p>注：<code>gitalk</code>评论模块对文字表格有影响，并且经常加载不出来。</p>\n<h2 id=\"优化\"><a href=\"#优化\" class=\"headerlink\" title=\"优化\"></a>优化</h2><h3 id=\"配置CDN\"><a href=\"#配置CDN\" class=\"headerlink\" title=\"配置CDN\"></a>配置CDN</h3><p>cdn加速，只需要将主题文件夹下的<code>_config.yml</code>最后遗一行配置即可。后面填<code>https://cdn.jsdelivr.net/gh/</code>加上你的github账户名和你的博客地址，例如我的：</p>\n<pre class=\"line-numbers language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">jsDelivr</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//cdn.jsdelivr.net/gh/axh2018/axh2018.github.io<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h3 id=\"压缩代码\"><a href=\"#压缩代码\" class=\"headerlink\" title=\"压缩代码\"></a>压缩代码</h3><p>安装插件：</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> hexo-neat --save<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>在根目录配置文件 <code>_config.yml</code> 末尾加入以下配置：</p>\n<pre class=\"line-numbers language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\" spellcheck=\"true\">#hexo-neat 优化提速插件（去掉HTML、css、js的blank字符）</span>\n<span class=\"token key atrule\">neat_enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n<span class=\"token key atrule\">neat_html</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n  <span class=\"token key atrule\">exclude</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token string\">'**/*.md'</span>\n<span class=\"token key atrule\">neat_css</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n  <span class=\"token key atrule\">exclude</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token string\">'**/*.min.css'</span>\n<span class=\"token key atrule\">neat_js</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n  <span class=\"token key atrule\">mangle</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n  <span class=\"token key atrule\">output</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">compress</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">exclude</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token string\">'**/*.min.js'</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token string\">'**/**/instantpage.js'</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token string\">'**/matery.js'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"新建404页面\"><a href=\"#新建404页面\" class=\"headerlink\" title=\"新建404页面\"></a>新建404页面</h3><p>主题并没有404页面，所以我们来添加一个，<code>source</code>目录下新建一个<code>404.md</code>，内容：</p>\n<pre class=\"line-numbers language-markdown\"><code class=\"language-markdown\">title: 404\ndate: 2020-2-22 19:20:00\ntype: \"404\"\nlayout: \"404\"\ndescription: \"Oops～，我崩溃了！找不到你想要的页面 :(\"<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>接着在/matery/layout/新建一个404.ejs文件，内容：</p>\n<pre class=\"line-numbers language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>text/css<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token style language-css\">\n    <span class=\"token comment\" spellcheck=\"true\">/* don't remove. */</span>\n    <span class=\"token selector\"><span class=\"token class\">.about-cover</span> </span><span class=\"token punctuation\">{</span>\n        <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> <span class=\"token number\">75</span>vh<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>bg-cover pd-header about-cover<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>container<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>row<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>col s10 offset-s1 m8 offset-m2 l8 offset-l2<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>brand<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>title center-align<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n                        404\n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>description center-align<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n                        &lt;%= page.description %>\n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script language-javascript\">\n    <span class=\"token comment\" spellcheck=\"true\">// 每天切换 banner 图. </span>\n    <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.bg-cover'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">css</span><span class=\"token punctuation\">(</span><span class=\"token string\">'background-image'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'url(/medias/banner/'</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'.jpg)'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"文章生成永久链接\"><a href=\"#文章生成永久链接\" class=\"headerlink\" title=\"文章生成永久链接\"></a>文章生成永久链接</h3><p>主题默认的文章链接配置</p>\n<pre class=\"line-numbers language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">premalink</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">:</span>year/<span class=\"token punctuation\">:</span>month/<span class=\"token punctuation\">:</span>day/<span class=\"token punctuation\">:</span>title<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>这种生成的链接地址很长，我们可以修改文章生成链接的格式。</p>\n<p>首先再根目录下执行下面的命令：</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> <span class=\"token function\">install</span> hexo-abbrlink --save<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>在博客文件夹根目录下<code>_config.yml</code>添加如下配置</p>\n<pre class=\"line-numbers language-yml\"><code class=\"language-yml\">abbrlink:\n    alg: crc16   #算法： crc16(default) and crc32\n    rep: hex     #进制： dec(default) and hex: dec \n                #输出进制：十进制和十六进制，默认为10进制。丨dec为十进制，hex为十六进制<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>再将站点配置文件的<code>permalink</code>的值修改为：</p>\n<pre class=\"line-numbers language-yml\"><code class=\"language-yml\">permalink: posts/:abbrlink.html<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>生成文章的链接格式格式如下（官方样例）:</p>\n<pre class=\"line-numbers language-yml\"><code class=\"language-yml\">crc16 & hex\nhttps://post.zz173.com/posts/66c8.html\n\ncrc16 & dec\nhttps://post.zz173.com/posts/65535.html\ncrc32 & hex\nhttps://post.zz173.com/posts/8ddf18fb.html\n\ncrc32 & dec\nhttps://post.zz173.com/posts/1690090958.html<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>生成完后，原md文件的Front-matter 内会增加<code>abbrlink</code> 字段，值为生成的ID 。这个字段确保了在我们修改了<code>Front-matter</code> 内的博客标题title或创建日期date字段之后而不会改变链接地址。</p>\n<h3 id=\"图片懒加载\"><a href=\"#图片懒加载\" class=\"headerlink\" title=\"图片懒加载\"></a>图片懒加载</h3><p><code>懒加载</code>一般是当图片滚动进可视窗口内才加载图片，可视窗口之外的图片则不加载</p>\n<p>本主题图片进行懒加载，这样做效果就是 <code>html</code>、<code>css</code>、<code>js</code> 加载之后，图片再加载。既保证了网页的打开速度，也不会因图片的庞大体积而拖累了整个页面的加载。</p>\n<p>先安装插件：</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> hexo-lazyload-image --save<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>然后到博客根目录下<code>_config.yml</code>中加入以下字段：</p>\n<pre class=\"line-numbers language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\" spellcheck=\"true\"># 懒加载</span>\n<span class=\"token key atrule\">lazyload</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true </span><span class=\"token comment\" spellcheck=\"true\"># 是否开启图片懒加载</span>\n  <span class=\"token key atrule\">onlypost</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false </span><span class=\"token comment\" spellcheck=\"true\"># 是否只对文章的图片做懒加载</span>\n  <span class=\"token key atrule\">loadingImg</span><span class=\"token punctuation\">:</span> /images/loading.gif<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>其中gif图的位置应该放在<code>source/images/</code>下。</p>\n<h3 id=\"设置文字模板\"><a href=\"#设置文字模板\" class=\"headerlink\" title=\"设置文字模板\"></a>设置文字模板</h3><p><code>Hexo</code>的页面是包括一个<code>md</code>文件和<code>ejs</code>文件结合而成的，<code>md</code>文件中的内容是页面配置，基本信息，和显示的内容。而<code>ejs</code>文件就是<code>js</code>逻辑代码了。</p>\n<p>我们在<code>scaffolds/post.md</code>中设置文章的默认模板，这样以后创建文章的时候，这些信息就默认添加上了，不同文章你也可以修改这些信息。上面Front-matter已经介绍过了。</p>\n<pre class=\"line-numbers language-markdown\"><code class=\"language-markdown\"><span class=\"token hr punctuation\">---</span>\ntitle: {{ title }}\ndate: {{ date }}\nauthor: 布莱恩特科比酱\nimg:\ntop:\ncover:\ncoverImg:\npassword:\ntoc:\nmathjax:\nsummary:\ncategories:\n<span class=\"token title important\">tags:\n<span class=\"token punctuation\">---</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"图片添加水印\"><a href=\"#图片添加水印\" class=\"headerlink\" title=\"图片添加水印\"></a>图片添加水印</h3><p>为了防止别人抄袭你文章，直接用你文字的图片，可以把所有的图片都加上水印。在博客根目录下新建一个<code>watermark.py</code>，代码如下：</p>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\"># -*- coding: utf-8 -*-</span>\n<span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">import</span> glob\n<span class=\"token keyword\">from</span> PIL <span class=\"token keyword\">import</span> Image\n<span class=\"token keyword\">from</span> PIL <span class=\"token keyword\">import</span> ImageDraw\n<span class=\"token keyword\">from</span> PIL <span class=\"token keyword\">import</span> ImageFont\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">watermark</span><span class=\"token punctuation\">(</span>post_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> post_name <span class=\"token operator\">==</span> <span class=\"token string\">'all'</span><span class=\"token punctuation\">:</span>\n        post_name <span class=\"token operator\">=</span> <span class=\"token string\">'*'</span>\n    dir_name <span class=\"token operator\">=</span> <span class=\"token string\">'source/_posts/'</span> <span class=\"token operator\">+</span> post_name <span class=\"token operator\">+</span> <span class=\"token string\">'/*'</span>\n    <span class=\"token keyword\">for</span> files <span class=\"token keyword\">in</span> glob<span class=\"token punctuation\">.</span>glob<span class=\"token punctuation\">(</span>dir_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        im <span class=\"token operator\">=</span> Image<span class=\"token punctuation\">.</span>open<span class=\"token punctuation\">(</span>files<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> len<span class=\"token punctuation\">(</span>im<span class=\"token punctuation\">.</span>getbands<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">:</span>\n            im <span class=\"token operator\">=</span> im<span class=\"token punctuation\">.</span>convert<span class=\"token punctuation\">(</span><span class=\"token string\">'RGB'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>files<span class=\"token punctuation\">)</span>\n        font <span class=\"token operator\">=</span> ImageFont<span class=\"token punctuation\">.</span>truetype<span class=\"token punctuation\">(</span><span class=\"token string\">'STSONG.TTF'</span><span class=\"token punctuation\">,</span> max<span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span> int<span class=\"token punctuation\">(</span>im<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">/</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        draw <span class=\"token operator\">=</span> ImageDraw<span class=\"token punctuation\">.</span>Draw<span class=\"token punctuation\">(</span>im<span class=\"token punctuation\">)</span>\n        draw<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>im<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> im<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                  u<span class=\"token string\">'@hiyoung'</span><span class=\"token punctuation\">,</span> fill<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> font<span class=\"token operator\">=</span>font<span class=\"token punctuation\">)</span>\n        im<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span>files<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> len<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span>\n        watermark<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[usage] &lt;input>'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>字体也放根目录下，自己找字体。然后每次写完一篇文章可以运行<code>python3 watermark.py postname</code>添加水印，如果第一次运行要给所有文章添加水印，可以运行<code>python3 watermark.py all</code>。</p>\n<p>这个代码的逻辑就是从文章目录下拿到图片，添加水印。这个前提是要文章的图片放在source/_posts/下，所以如果在文章中直接引用了其他地方的图片链接，那么这个脚本不会去给那个图片加水印了。</p>\n<h3 id=\"动态标签栏\"><a href=\"#动态标签栏\" class=\"headerlink\" title=\"动态标签栏\"></a>动态标签栏</h3><p>在<code>theme/matery/layout/layout.ejs</code>下添加如下代码：</p>\n<pre class=\"line-numbers language-javascript\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>script type<span class=\"token operator\">=</span> <span class=\"token string\">\"text/javascript\"</span> <span class=\"token operator\">></span>\n    <span class=\"token keyword\">var</span> OriginTitile<span class=\"token operator\">=</span>document<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">,</span>st<span class=\"token punctuation\">;</span>\n    document<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"visibilitychange\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>\n        document<span class=\"token punctuation\">.</span>hidden<span class=\"token operator\">?</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span>title<span class=\"token operator\">=</span><span class=\"token string\">\"ヽ(●-`Д´-)ノ你要玩捉迷藏嘛\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">clearTimeout</span><span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span>title<span class=\"token operator\">=</span><span class=\"token string\">\"(Ő∀Ő3)ノ被发现啦！\"</span><span class=\"token punctuation\">,</span>st<span class=\"token operator\">=</span><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            document<span class=\"token punctuation\">.</span>title<span class=\"token operator\">=</span>OriginTitile<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token number\">3e3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"修改导航栏颜色以及透明效果\"><a href=\"#修改导航栏颜色以及透明效果\" class=\"headerlink\" title=\"修改导航栏颜色以及透明效果\"></a>修改导航栏颜色以及透明效果</h3><p><code>themes/matery/source/css/matery.css</code>文件中，有一个<code>.bg-color</code>属性，修改其属性值即可，代码如下：</p>\n<pre class=\"line-numbers language-css\"><code class=\"language-css\"><span class=\"token selector\"><span class=\"token class\">.bg-color</span> </span><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token function\">linear-gradient</span><span class=\"token punctuation\">(</span>to right, <span class=\"token hexcode\">#4cbf30</span> <span class=\"token number\">0%</span>, <span class=\"token hexcode\">#0f9d58</span> <span class=\"token number\">100%</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    //修改成自己喜欢的颜色值\n    <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0.8</span><span class=\"token punctuation\">;</span>  \n    //透明效果 值范围 <span class=\"token number\">0</span>~<span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"外链跳转插件\"><a href=\"#外链跳转插件\" class=\"headerlink\" title=\"外链跳转插件\"></a>外链跳转插件</h3><p>跳转外链相关插件。自动为所有<code>html</code>文件中外链的<code>a</code>标签生成对应的属性。 比如 设置 <code>target='_blank'</code>, <code>rel='external nofollow noopener noreferrer'</code> 告诉搜索引擎这是外部链接,不要将该链接计入权重。 同时自动生成外链跳转页面,默认在根目录下<code>go.html</code>;</p>\n<p>安装插件：</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> <span class=\"token function\">install</span> hexo-external-link --save<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>配置插件：</p>\n<p>在<code>Hexo</code>根目录的<code>_config.yml</code>文件中添加如下配置。</p>\n<pre class=\"line-numbers language-yml\"><code class=\"language-yml\">hexo_external_link:\n  enable: true\n  enable_base64_encode: true\n  url_param_name: 'u'\n  html_file_name: 'go.html'\n  target_blank: true\n  link_rel: 'external nofollow noopener noreferrer'\n  domain: 'your_domain' # 如果开启了防盗链\n  safety_chain: true<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li><strong>enable</strong> - 是否开启<code>hexo_external_link</code>插件 - 默认 false</li>\n<li><strong>enable_base64_encode</strong> - 是否对跳转<code>url</code>使用<code>base64编码</code> - 默认 fasle</li>\n<li><strong>url_param_name</strong> - url参数名,在跳转到外链传递给<code>html_file_name</code>的参数名 - 默认 ‘u’</li>\n<li><strong>html_file_name</strong> - 跳转到外链的页面文件路径 - 默认 ‘go.html’</li>\n<li><strong>target_blank</strong> - 是否为外链的<code>a</code>标签添加<code>target='_blank'</code> - 默认 true</li>\n<li><strong>link_rel</strong> - 设置外链的<code>a</code>标签的rel属性 - 默认 ‘external nofollow noopener noreferrer’</li>\n<li><strong>domain</strong> - 如果开启了防盗链,除了 localhost 和 domain 之外调用会跳到主页,同时也是判断链接是否为外链的依据 - 默认 window.location.host</li>\n<li><strong>safety_chain</strong> - go.html 为了防止外链盗用 对域名进行的判断 - 默认 false</li>\n</ul>\n<h3 id=\"添加鼠标点击烟花爆炸效果\"><a href=\"#添加鼠标点击烟花爆炸效果\" class=\"headerlink\" title=\"添加鼠标点击烟花爆炸效果\"></a>添加鼠标点击烟花爆炸效果</h3><p><code>themes/matery/source/js</code>目录下新建<code>fireworks.js</code>文件，打开<a href=\"https://github.com/axh2018/script/blob/master/fireworks.js\" target=\"_blank\" rel=\"noopener\"></a>将内容复制粘贴到<code>fireworks.js</code>。</p>\n<p>然后在<code>themes/matery/layout/layout.ejs</code>文件内添加以下内容：</p>\n<pre class=\"line-numbers language-javascript\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>canvas <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"fireworks\"</span> style<span class=\"token operator\">=</span><span class=\"token string\">\"position: fixed;left: 0;top: 0;z-index: 1; pointer-events: none;\"</span> <span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>canvas<span class=\"token operator\">></span> \n<span class=\"token operator\">&lt;</span>script type<span class=\"token operator\">=</span><span class=\"token string\">\"text/javascript\"</span> src<span class=\"token operator\">=</span><span class=\"token string\">\"//cdn.bootcss.com/animejs/2.2.0/anime.min.js\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span> \n<span class=\"token operator\">&lt;</span>script type<span class=\"token operator\">=</span><span class=\"token string\">\"text/javascript\"</span> src<span class=\"token operator\">=</span><span class=\"token string\">\"/js/fireworks.js\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"添加樱花飘落效果\"><a href=\"#添加樱花飘落效果\" class=\"headerlink\" title=\"添加樱花飘落效果\"></a>添加樱花飘落效果</h3><p>在<code>themes/matery/source/js</code>目录下新建<code>sakura.js</code>文件，打开<a href=\"https://github.com/axh2018/script/blob/master/sakura.js\" target=\"_blank\" rel=\"noopener\"></a><br>将内容复制粘贴到<code>sakura.js</code>。</p>\n<p>然后在<code>themes/matery/layout/layout.ejs</code>文件内添加以下内容：</p>\n<pre class=\"line-numbers language-javascript\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>script type<span class=\"token operator\">=</span><span class=\"token string\">\"text/javascript\"</span><span class=\"token operator\">></span>\n<span class=\"token comment\" spellcheck=\"true\">//只在桌面版网页启用特效</span>\n<span class=\"token keyword\">var</span> windowWidth <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">width</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>windowWidth <span class=\"token operator\">></span> <span class=\"token number\">768</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    document<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;script type=\"text/javascript\" src=\"/js/sakura.js\">&lt;\\/script>'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"添加鼠标彩虹星星掉落跟随效果\"><a href=\"#添加鼠标彩虹星星掉落跟随效果\" class=\"headerlink\" title=\"添加鼠标彩虹星星掉落跟随效果\"></a>添加鼠标彩虹星星掉落跟随效果</h3><p>在<code>themes/matery/source/js</code>目录下新建<code>cursor.js</code>文件，打开<a href=\"https://github.com/axh2018/script/blob/master/cursor.js\" target=\"_blank\" rel=\"noopener\"></a><br>将内容复制粘贴到<code>cursor.js</code>。</p>\n<p>然后在<code>themes/matery/layout/layout.ejs</code>文件内添加以下内容：</p>\n<pre class=\"line-numbers language-javascript\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>script src<span class=\"token operator\">=</span><span class=\"token string\">\"/js/snow.js\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"添加雪花飘落效果\"><a href=\"#添加雪花飘落效果\" class=\"headerlink\" title=\"添加雪花飘落效果\"></a>添加雪花飘落效果</h3><p>在<code>themes/matery/source/js</code>目录下新建<code>cursor.js</code>文件，打开<a href=\"https://github.com/axh2018/script/blob/master/snow.js\" target=\"_blank\" rel=\"noopener\">https://github.com/axh2018/script/blob/master/snow.js</a><br>将内容复制粘贴到<code>cursor.js</code>。</p>\n<p>然后在<code>themes/matery/layout/layout.ejs</code>文件内添加以下内容：</p>\n<pre class=\"line-numbers language-javascript\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>script src<span class=\"token operator\">=</span><span class=\"token string\">\"/js/snow.js\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"添加鼠标点击文字特效\"><a href=\"#添加鼠标点击文字特效\" class=\"headerlink\" title=\"添加鼠标点击文字特效\"></a>添加鼠标点击文字特效</h3><p>主题文件下的<code>/source/js/</code>下新建<code>click_show_text.js</code>，以下代码添到<code>js</code>中：</p>\n<pre class=\"line-numbers language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a_idx <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">jQuery</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ready</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>$<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"body\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"富强\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"民主\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"文明\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"和谐\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"自由\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"平等\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"公正\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"法治\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"爱国\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"敬业\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"诚信\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"友善\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> $i <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;span/>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>a_idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        a_idx <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a_idx <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> a<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>pageX<span class=\"token punctuation\">,</span>\n            y <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>pageY<span class=\"token punctuation\">;</span>\n        $i<span class=\"token punctuation\">.</span><span class=\"token function\">css</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            <span class=\"token string\">\"z-index\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"top\"</span><span class=\"token punctuation\">:</span> y <span class=\"token operator\">-</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"left\"</span><span class=\"token punctuation\">:</span> x<span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"position\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"absolute\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"font-weight\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"bold\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"color\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"#FF0000\"</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"body\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>$i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        $i<span class=\"token punctuation\">.</span><span class=\"token function\">animate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n                <span class=\"token string\">\"top\"</span><span class=\"token punctuation\">:</span> y <span class=\"token operator\">-</span> <span class=\"token number\">180</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"opacity\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token number\">3000</span><span class=\"token punctuation\">,</span>\n            <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                $i<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token string\">'delay()'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">delay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".buryit\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">removeAttr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"onclick\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"增加建站时间\"><a href=\"#增加建站时间\" class=\"headerlink\" title=\"增加建站时间\"></a>增加建站时间</h3><p>只需将主题的<code>_config.yml</code>中的<code>time</code>设置为<code>true</code>即可：</p>\n<pre class=\"line-numbers language-yml\"><code class=\"language-yml\"># Website start time.\n# 站点运行开始时间.\ntime:\n  enable: trues\n  year: 2019 # 年份\n  month: 11 # 月份\n  date: 30 # 日期\n  hour: 17 # 小时\n  minute: 30 # 分钟\n  second: 00 # 秒<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"添加博客天气插件\"><a href=\"#添加博客天气插件\" class=\"headerlink\" title=\"添加博客天气插件\"></a>添加博客天气插件</h3><p>去中国天气网<a></a><a href=\"https://cj.weather.com.cn/plugin/pc\" target=\"_blank\" rel=\"noopener\">https://cj.weather.com.cn/plugin/pc</a>可以获取一段定制的天气代码，将这段代码添加到</p>\n<p> <code>/themes/matery/layout/layout.ejs</code>即可，例如：</p>\n<pre class=\"line-numbers language-javascript\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> my_weather天气 <span class=\"token operator\">--</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>script type<span class=\"token operator\">=</span><span class=\"token string\">\"text/javascript\"</span><span class=\"token operator\">></span>\n        WIDGET <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>FID<span class=\"token punctuation\">:</span> <span class=\"token string\">'QIqG0hDUBi'</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>script type<span class=\"token operator\">=</span><span class=\"token string\">\"text/javascript\"</span> src<span class=\"token operator\">=</span><span class=\"token string\">\"https://apip.weatherdt.com/float/static/js/r.js?v=1111\"</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"添加live2d模型\"><a href=\"#添加live2d模型\" class=\"headerlink\" title=\"添加live2d模型\"></a>添加live2d模型</h3><p>安装插件：</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save hexo-helper-live2d<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>安装模型：</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save hexo-helper-live2d<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>配置：</p>\n<pre class=\"line-numbers language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">live2d</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n    <span class=\"token key atrule\">scriptFrom</span><span class=\"token punctuation\">:</span> local\n    <span class=\"token key atrule\">pluginRootPath</span><span class=\"token punctuation\">:</span> live2dw/\n    <span class=\"token key atrule\">pluginJsPath</span><span class=\"token punctuation\">:</span> lib/\n    <span class=\"token key atrule\">pluginModelPath</span><span class=\"token punctuation\">:</span> assets/\n    <span class=\"token key atrule\">tagMode</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span>\n    <span class=\"token key atrule\">log</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span>\n    <span class=\"token key atrule\">model</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">use</span><span class=\"token punctuation\">:</span> live2d<span class=\"token punctuation\">-</span>widget<span class=\"token punctuation\">-</span>model<span class=\"token punctuation\">-</span>shizuku\n    <span class=\"token key atrule\">display</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">position</span><span class=\"token punctuation\">:</span> right\n        <span class=\"token key atrule\">width</span><span class=\"token punctuation\">:</span> <span class=\"token number\">150</span>\n        <span class=\"token key atrule\">height</span><span class=\"token punctuation\">:</span> <span class=\"token number\">300</span>\n    <span class=\"token key atrule\">mobile</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">show</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span>\n    <span class=\"token key atrule\">react</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">opacity</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0.7</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>其中模型你可以更改，想了解更多，请移步官网<a href=\"https://github.com/EYHN/hexo-helper-live2d/blob/master/README.zh-CN.md\" target=\"_blank\" rel=\"noopener\">https://github.com/EYHN/hexo-helper-live2d/blob/master/README.zh-CN.md</a></p>\n<h3 id=\"背景动态彩带\"><a href=\"#背景动态彩带\" class=\"headerlink\" title=\"背景动态彩带\"></a>背景动态彩带</h3><p>只需将<code>matery/_config.yml</code>中<code>canvas_nest</code>设置为<code>true</code>即可：</p>\n<pre class=\"line-numbers language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\" spellcheck=\"true\"># 背景静止彩带.</span>\n<span class=\"token key atrule\">ribbon</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n  <span class=\"token key atrule\">size</span><span class=\"token punctuation\">:</span> <span class=\"token number\">150 </span><span class=\"token comment\" spellcheck=\"true\"># 彩带大小, 默认: 90.</span>\n  <span class=\"token key atrule\">alpha</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0.6 </span><span class=\"token comment\" spellcheck=\"true\"># 彩带透明度 (0 ~ 1), 默认: 0.6.</span>\n  <span class=\"token key atrule\">zIndex</span><span class=\"token punctuation\">:</span> <span class=\"token number\">-1 </span><span class=\"token comment\" spellcheck=\"true\"># 背景的z-index属性，css属性用于控制所在层的位置, 默认: -1.</span>\n  <span class=\"token key atrule\">clickChange</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false  </span><span class=\"token comment\" spellcheck=\"true\"># 设置是否每次点击都更换彩带.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"背景动态线条\"><a href=\"#背景动态线条\" class=\"headerlink\" title=\"背景动态线条\"></a>背景动态线条</h3><p>只需将<code>matery/_config.yml</code>中<code>ribbon_dynamic</code>设置为<code>true</code>即可：</p>\n<pre class=\"line-numbers language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">ribbon_dynamic</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>注：加载这些样式非常耗资源。</p>\n<h3 id=\"添加反爬虫协议\"><a href=\"#添加反爬虫协议\" class=\"headerlink\" title=\"添加反爬虫协议\"></a>添加反爬虫协议</h3><p>robots是网站跟爬虫间的协议，用简单直接的txt格式文本方式告诉对应的爬虫被允许的权限，也就是说robots.txt是搜索引擎中访问网站的时候要查看的第一个文件。当一个搜索蜘蛛访问一个站点时，它会首先检查该站点根目录下是否存在robots.txt，如果存在，搜索机器人就会按照该文件中的内容来确定访问的范围；如果该文件不存在，所有的搜索蜘蛛将能够访问网站上所有没有被口令保护的页面。</p>\n<p>我们在hexo 根目录下的 <code>public</code> 目录下新建一个<code>robots.txt</code>文件，内容如下：</p>\n<pre class=\"line-numbers language-txt\"><code class=\"language-txt\">User-agent: *\nAllow: /\nAllow: /archives/\nAllow: /categories/\nAllow: /tags/\nDisAllow: /about/\nDisallow: /friends/\nDisallow: /contact/\nSitemap: https://axh2018.cn/sitemap.xml\nSitemap: https://axh2018.cn/baidu_sitemap.xml<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>你可自定义哪些内容可以被爬取，哪些内容不能。</p>\n<p>参考</p>\n<ul>\n<li><a href=\"https://chinatianyunfeng.github.io/posts/63466.html#toc-heading-8\" target=\"_blank\" rel=\"noopener\">https://chinatianyunfeng.github.io/posts/63466.html#toc-heading-8</a></li>\n<li><a href=\"https://yafine-blog.cn/posts/4ab2.html#toc-heading-55\" target=\"_blank\" rel=\"noopener\">https://yafine-blog.cn/posts/4ab2.html#toc-heading-55</a></li>\n<li><a href=\"https://sunhwee.com/posts/6e8839eb.html#toc-heading-37\" target=\"_blank\" rel=\"noopener\">https://sunhwee.com/posts/6e8839eb.html#toc-heading-37</a></li>\n<li><a href=\"https://github.com/blinkfox/hexo-theme-matery\" target=\"_blank\" rel=\"noopener\">https://github.com/blinkfox/hexo-theme-matery</a></li>\n</ul>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","more":"<h1 id=\"Hexo搭建个人博客\"><a href=\"#Hexo搭建个人博客\" class=\"headerlink\" title=\"Hexo搭建个人博客\"></a>Hexo搭建个人博客</h1><h2 id=\"简单开始\"><a href=\"#简单开始\" class=\"headerlink\" title=\"简单开始\"></a>简单开始</h2><p><b>如果你不想那么麻烦，想偷懒的话，不妨直接</b></p>\n<h3 id=\"下载-Git\"><a href=\"#下载-Git\" class=\"headerlink\" title=\"下载 Git\"></a>下载 <a href=\"https://git-scm.com/downloads\" target=\"_blank\" rel=\"noopener\">Git</a></h3><p>鼠标右键可以看到Git Bash Here 即可</p>\n<h3 id=\"下载node-js\"><a href=\"#下载node-js\" class=\"headerlink\" title=\"下载node.js\"></a>下载<a href=\"https://nodejs.org/en/download/\" target=\"_blank\" rel=\"noopener\">node.js</a></h3><p>cmd下npm -v有输出即可</p>\n<h3 id=\"设置镜像源\"><a href=\"#设置镜像源\" class=\"headerlink\" title=\"设置镜像源\"></a>设置镜像源</h3><p>创建一个存放博客的文件夹，进入文件夹，右键选择 Git Bash Here，然后设置<code>npm</code>的镜像源为淘宝镜像源，这样能<strong>加快下载插件速度</strong></p>\n<pre><code class=\"shell\">$ npm config set registry https://registry.npm.taobao.org</code></pre>\n<h3 id=\"配置Git账户和邮箱\"><a href=\"#配置Git账户和邮箱\" class=\"headerlink\" title=\"配置Git账户和邮箱\"></a>配置Git账户和邮箱</h3><p>在你的博客文件夹下右键Git Bash Here</p>\n<pre><code class=\"shell\">$ git config --global user.name &quot;UserID&quot; \n$ git config --global user.email &quot;email-address&quot;</code></pre>\n<p><strong>这里的账号和邮箱换成你自己的</strong></p>\n<h3 id=\"生成ssh密钥\"><a href=\"#生成ssh密钥\" class=\"headerlink\" title=\"生成ssh密钥\"></a>生成ssh密钥</h3><p>这里三次回车即可</p>\n<pre><code class=\"shell\">$ ssh-keygen -t rsa -C &quot;email-address&quot;</code></pre>\n<p><strong>邮箱同样换成自己的</strong></p>\n<h3 id=\"密钥上传到Github\"><a href=\"#密钥上传到Github\" class=\"headerlink\" title=\"密钥上传到Github\"></a>密钥上传到Github</h3><pre><code class=\"shell\">$ cat ~/.ssh/id_rsa.pub</code></pre>\n<p>登录GitHub网站点右上角<code>Settings-&gt;SSH and GPG Keys</code>,新建一个<code>key</code>,将上面的结果复制填进去就好了</p>\n<h3 id=\"测试是否上传成功\"><a href=\"#测试是否上传成功\" class=\"headerlink\" title=\"测试是否上传成功\"></a>测试是否上传成功</h3><p>下面的指令的输出能看到你<code>Github</code>账户名字就行了</p>\n<pre><code class=\"shell\">$ ssh -T git@github.com</code></pre>\n<h3 id=\"克隆项目\"><a href=\"#克隆项目\" class=\"headerlink\" title=\"克隆项目\"></a>克隆项目</h3><p>在你的博客文件夹下,右键选择 Git Bash Here，然后</p>\n<pre><code class=\"shell\">$ git clone git@github.com:axh2018/hexo_blog.git   .    #克隆项目\n$ npm i                                                #安装依赖插件和框架</code></pre>\n<h3 id=\"测试hexo\"><a href=\"#测试hexo\" class=\"headerlink\" title=\"测试hexo\"></a>测试hexo</h3><pre><code class=\"shell\">$ hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</code></pre>\n<p>打开浏览器127.0.0.1:4000，就可以本地预览效果 </p>\n<p><a href=\"https://axh2018.gitee.io/\" target=\"_blank\" rel=\"noopener\">点击预览https://axh2018.gitee.io/</a></p>\n<blockquote>\n<p>hexo  clean (清除缓存文件,可简写hexo cl)</p>\n</blockquote>\n<blockquote>\n<p>hexo generate (生成网页,可简写hexo g)</p>\n</blockquote>\n<blockquote>\n<p>hexo server (本地预览,可简写hexo s)</p>\n</blockquote>\n<blockquote>\n<p>hexo deploy (部署到GitHub,可简写hexo d)</p>\n</blockquote>\n<h3 id=\"部署到Github\"><a href=\"#部署到Github\" class=\"headerlink\" title=\"部署到Github\"></a>部署到Github</h3><p>能本地预览的话，就可以把相关信息改为自己的然后部署到<code>GitHub</code><br><code>Github</code>创建一个仓库，这个仓库的名字必须是 userid.github.io<br>例如我的id是axh2018，那么我的仓库名就必须是axh2018.github.io </p>\n<p>部署到<code>Github</code>,修改你博客文件夹根目录下的<code>_config.yaml</code>文件的倒数第二行,<code>repository</code>的地址改成你的<code>GitHub</code>博客仓库地址</p>\n<p>例如我的：</p>\n<pre><code class=\"shell\">deploy:\ntype: git\nrepository: https://github.com/axh2018/axh2018.github.io\nbranch: master</code></pre>\n<p><strong>到这基本就完成了，剩下你所需要的工作就是把配置文件(根目录下的_config.yaml和主题文件夹下的_config_yaml)的相关信息改为你自己的信息即可。</strong></p>\n<h2 id=\"前提准备：\"><a href=\"#前提准备：\" class=\"headerlink\" title=\"前提准备：\"></a>前提准备：</h2><h3 id=\"下载node-js-1\"><a href=\"#下载node-js-1\" class=\"headerlink\" title=\"下载node.js\"></a>下载node.js</h3><blockquote>\n<p>Node.js 是一个基于 Chrome V8 引擎的 <a href=\"https://baike.baidu.com/item/JavaScript/321142\" target=\"_blank\" rel=\"noopener\">JavaScript</a> 运行环境。 Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型。Node 是一个让 JavaScript 运行在<a href=\"https://baike.baidu.com/item/服务端/6492316\" target=\"_blank\" rel=\"noopener\">服务端</a>的开发平台，它让 JavaScript 成为与<a href=\"https://baike.baidu.com/item/PHP/9337\" target=\"_blank\" rel=\"noopener\">PHP</a>、<a href=\"https://baike.baidu.com/item/Python/407313\" target=\"_blank\" rel=\"noopener\">Python</a>、<a href=\"https://baike.baidu.com/item/Perl/851577\" target=\"_blank\" rel=\"noopener\">Perl</a>、<a href=\"https://baike.baidu.com/item/Ruby/11419\" target=\"_blank\" rel=\"noopener\">Ruby</a> 等服务端语言平起平坐的<a href=\"https://baike.baidu.com/item/脚本语言/1379708\" target=\"_blank\" rel=\"noopener\">脚本语言</a>。发布于2009年5月，由Ryan Dahl开发，实质是对Chrome V8引擎进行了封装。</p>\n<p>Node对一些特殊用例进行优化，提供替代的<a href=\"https://baike.baidu.com/item/API/10154\" target=\"_blank\" rel=\"noopener\">API</a>，使得V8在非浏览器环境下运行得更好。V8引擎执行Javascript的速度非常快，性能非常好。Node是一个基于Chrome JavaScript运行时建立的平台， 用于方便地搭建响应速度快、易于扩展的网络应用。Node 使用<a href=\"https://baike.baidu.com/item/事件驱动/9597519\" target=\"_blank\" rel=\"noopener\">事件驱动</a>， 非阻塞<a href=\"https://baike.baidu.com/item/I%2FO/84718\" target=\"_blank\" rel=\"noopener\">I/O</a> 模型而得以轻量和高效，非常适合在分布式设备上运行数据密集型的实时应用。</p>\n</blockquote>\n<p><img src=\"/images/loading.gif\" data-original=\"https://raw.githubusercontent.com/axh2018/picgo_picture/master/20200222185614.png\" alt=\"\"></p>\n<p>如图，cmd下输入node -v有版本号即可。</p>\n<h3 id=\"下载Git\"><a href=\"#下载Git\" class=\"headerlink\" title=\"下载Git\"></a>下载Git</h3><blockquote>\n<p>Git(读音为/gɪt/。)是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。 Git 是 [Linus Torvalds](<a href=\"https://baike.baidu.com/item/Linus\" target=\"_blank\" rel=\"noopener\">https://baike.baidu.com/item/Linus</a> Torvalds/9336769) 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。</p>\n<p>Torvalds 开始着手开发 Git 是为了作为一种过渡方案来替代 BitKe</p>\n</blockquote>\n<p><img src=\"/images/loading.gif\" data-original=\"https://raw.githubusercontent.com/axh2018/picgo_picture/master/20200222185835.png\" alt=\"\"></p>\n<p>如图，鼠标右键能看见Git Bash Here和Git GUI Here即可。</p>\n<h3 id=\"GitHub账号\"><a href=\"#GitHub账号\" class=\"headerlink\" title=\"GitHub账号\"></a>GitHub账号</h3><blockquote>\n<p>GitHub是一个面向<a href=\"https://baike.baidu.com/item/开源/20720669\" target=\"_blank\" rel=\"noopener\">开源</a>及私有<a href=\"https://baike.baidu.com/item/软件/12053\" target=\"_blank\" rel=\"noopener\">软件</a>项目的托管平台，因为只支持git 作为唯一的版本库格式进行托管，故名GitHub。</p>\n<p>GitHub于2008年4月10日正式上线，除了Git代码仓库托管及基本的 Web管理界面以外，还提供了订阅、讨论组、文本渲染、在线文件编辑器、协作图谱（报表）、代码片段分享（Gist）等功能。目前，其注册用户已经超过350万，托管版本数量也是非常之多，其中不乏知名开源项目 <a href=\"https://baike.baidu.com/item/Ruby/11419\" target=\"_blank\" rel=\"noopener\">Ruby</a> on Rails、<a href=\"https://baike.baidu.com/item/jQuery/5385065\" target=\"_blank\" rel=\"noopener\">jQuery</a>、<a href=\"https://baike.baidu.com/item/python/407313\" target=\"_blank\" rel=\"noopener\">python</a> 等。</p>\n</blockquote>\n<blockquote>\n<p>2018年6月4日，微软宣布，通过75亿美元的股票交易收购代码托管平台GitHub。</p>\n</blockquote>\n<h2 id=\"开始搭建\"><a href=\"#开始搭建\" class=\"headerlink\" title=\"开始搭建\"></a>开始搭建</h2><h3 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h3><p>首先创建一个放置博客的文件夹，进入文件夹，右键Git Bash Here，输入下面的指令，添加国内镜像源,加快下载插件速度</p>\n<pre><code class=\"bash\">$ npm config set registry https://registry.npm.taobao.org</code></pre>\n<p>注：这条指令输入后并不会有任何输出，别以为是出错了。</p>\n<blockquote>\n<p>Hexo 是一个快速、简洁且高效的博客框架。</p>\n<p>Hexo 使用 <a href=\"http://daringfireball.net/projects/markdown/\" target=\"_blank\" rel=\"noopener\">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>\n<p>快速、简洁且高效的博客框架,Node.js 所带来的超快生成速度，让上百个页面在几秒内瞬间完成渲染。</p>\n<p>只需一条指令即可部署到 GitHub Pages, Heroku 或其他网站。</p>\n<p>Hexo 拥有强大的插件系统，安装插件可以让 Hexo 支持 Jade, CoffeeScript。</p>\n</blockquote>\n<p>同样，在博客文件夹下，右键Git Bash Here，输入</p>\n<pre><code class=\"bash\">$ npm  install -g hexo-cli</code></pre>\n<p>可以输入<code>hexo -v</code>验证是否安装成功，输出版本号即可。</p>\n<p><img src=\"/images/loading.gif\" data-original=\"https://raw.githubusercontent.com/axh2018/picgo_picture/master/20200222191436.png\" alt=\"\"></p>\n<p>Hexo初始化</p>\n<p>同样，在博客文件夹下，右键Git Bash Here，输入</p>\n<pre><code class=\"bash\">$ hexo init </code></pre>\n<p><img src=\"/images/loading.gif\" data-original=\"https://raw.githubusercontent.com/axh2018/picgo_picture/master/20200222192829.png\" alt=\"\"></p>\n<p>Hexo初始化后 ，有以下几个文件/文件夹。</p>\n<ul>\n<li><code>scaffolds：</code>生成文章的一些模板 </li>\n<li><code>source：</code>用来存放你的文章</li>\n<li><code>themes：</code>主题</li>\n<li>.<code>gitignore</code> Git忽略文件夹</li>\n<li><code>_config.yml:</code> 博客的配置文件</li>\n<li><code>package.json</code>  所需模块</li>\n<li><code>node_modules:</code> 依赖包</li>\n<li><code>package-lock.json</code> 记录了模块下载地址</li>\n</ul>\n<p><img src=\"/images/loading.gif\" data-original=\"https://raw.githubusercontent.com/axh2018/picgo_picture/master/20200222192929.png\" alt=\"\"></p>\n<h3 id=\"安装依赖插件\"><a href=\"#安装依赖插件\" class=\"headerlink\" title=\"安装依赖插件\"></a>安装依赖插件</h3><p>同样，在博客文件夹下，右键Git Bash Here，输入</p>\n<pre><code class=\"bash\">$ npm intall </code></pre>\n<p><img src=\"/images/loading.gif\" data-original=\"https://raw.githubusercontent.com/axh2018/picgo_picture/master/20200222193359.png\" alt=\"\"></p>\n<h3 id=\"测试运行\"><a href=\"#测试运行\" class=\"headerlink\" title=\"测试运行\"></a>测试运行</h3><pre><code class=\"bash\">$ hexo generate      #或者简写hexo g</code></pre>\n<p>此时你的博客文件夹根目录下下，会生成一个<code>pubic</code>文件夹，里面存放了生成的页面。</p>\n<p><img src=\"/images/loading.gif\" data-original=\"https://raw.githubusercontent.com/axh2018/picgo_picture/master/20200222205522.png\" alt=\"\"></p>\n<h3 id=\"本地预览效果\"><a href=\"#本地预览效果\" class=\"headerlink\" title=\"本地预览效果\"></a>本地预览效果</h3><pre><code class=\"bash\">$ hexo server        #或者简写hexo s</code></pre>\n<p>打开浏览器，输入<code>127.0.0.1:4000</code>  即可预览本地效果</p>\n<p><img src=\"/images/loading.gif\" data-original=\"https://raw.githubusercontent.com/axh2018/picgo_picture/master/20200222205654.png\" alt=\"\"></p>\n<h3 id=\"部署到Github-1\"><a href=\"#部署到Github-1\" class=\"headerlink\" title=\"部署到Github\"></a>部署到Github</h3><h4 id=\"创建博客仓库\"><a href=\"#创建博客仓库\" class=\"headerlink\" title=\"创建博客仓库\"></a>创建博客仓库</h4><p><img src=\"/images/loading.gif\" data-original=\"https://raw.githubusercontent.com/axh2018/picgo_picture/master/20200222210439.png\" alt=\"\"></p>\n<p>需要 注意的是，仓库名有要求,要创建一个和你用户名相同的仓库，后面加<code>github.io</code>，只有这样，将来要部署到GitHub page的时候，才会被识别，也就是<a href=\"http://xxxx.github.io，其中xxx就是你注册`GitHub`的用户名。例如我的GitHub\" target=\"_blank\" rel=\"noopener\">http://xxxx.github.io，其中xxx就是你注册`GitHub`的用户名。例如我的GitHub</a> id为axh2018，那么我的仓库名必须为axh2018.github.io</p>\n<p><img src=\"/images/loading.gif\" data-original=\"https://raw.githubusercontent.com/axh2018/picgo_picture/master/20200222211048.png\" alt=\"\"></p>\n<h4 id=\"生成SSH密钥\"><a href=\"#生成SSH密钥\" class=\"headerlink\" title=\"生成SSH密钥\"></a>生成SSH密钥</h4><p>博客文件夹根目录下，右键Git Bash Here，输入</p>\n<pre><code class=\"bash\">$ git  config --global  user.name    &quot;githubid&quot;\n$ git  config --global  user.email     &quot;email&quot;</code></pre>\n<p>这里<code>id</code>和<code>email</code>换成你自己的信息，然后生成<code>ssh</code>密钥</p>\n<pre><code class=\"bash\">$ ssh-keygen  -t rsa -C &quot;email&quot;</code></pre>\n<p><img src=\"/images/loading.gif\" data-original=\"https://raw.githubusercontent.com/axh2018/picgo_picture/master/20200222215028.png\" alt=\"\"></p>\n<p>这个时候在你的家目录下会生成一个<code>.ssh</code>文件夹，里面会有两个密钥，而你要做的，是将其中一个上传到<code>Github</code></p>\n<pre><code class=\"bash\">$ cat  ~/.ssh/id_rsa.pub</code></pre>\n<p><img src=\"/images/loading.gif\" data-original=\"https://raw.githubusercontent.com/axh2018/picgo_picture/master/20200222215154.png\" alt=\"\"></p>\n<p>将输入的内容复制，打开Github右上角的Settings,找到<code>SSH and GPG keys</code>，然后新建一个<code>key</code>，<code>key</code>的名字随意填一个，内容即刚复制的内容。</p>\n<p><img src=\"/images/loading.gif\" data-original=\"https://raw.githubusercontent.com/axh2018/picgo_picture/master/20200222215350.png\" alt=\"\"></p>\n<p>输入 <code>ssh -T git@github.com</code>,如果输出你的<code>id</code>，即验证成功。</p>\n<p><img src=\"/images/loading.gif\" data-original=\"https://raw.githubusercontent.com/axh2018/picgo_picture/master/20200222215811.png\" alt=\"\"></p>\n<h4 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h4><p>此时，大部分工作已经做完了，接下来就是将<code>hexo g</code>生成的静态页面上传到GitHub上。</p>\n<ul>\n<li><p>安装deploy-git 插件</p>\n<pre><code class=\"bash\">$ npm install hexo-deployer-git --save</code></pre>\n</li>\n</ul>\n<p><img src=\"/images/loading.gif\" data-original=\"https://raw.githubusercontent.com/axh2018/picgo_picture/master/20200222234213.png\" alt=\"\"></p>\n<ul>\n<li><p>修改_config.yaml文件最后几行</p>\n<pre><code class=\"yml\">   deploy:\n     type: git\n     repository: https://github.com/axh2018/axh2018.github.io\n     branch: master</code></pre>\n</li>\n<li><p>部署到GIthub</p>\n<pre><code class=\"bash\">   $ hexo clean        #删除原来生成的pubic文件夹\n   $ hexo g            #生成新的页面\n   $ hexo d            #部署到GitHub</code></pre>\n</li>\n</ul>\n<p>​    部署成功后可以通过  <a href=\"https://userid.github.io访问\" target=\"_blank\" rel=\"noopener\">https://userid.github.io访问</a></p>\n<h4 id=\"layout布局\"><a href=\"#layout布局\" class=\"headerlink\" title=\"layout布局\"></a>layout布局</h4><p>你新建一篇文章时：</p>\n<pre><code class=\"bash\">$ hexo new XXX</code></pre>\n<p>它其实默认使用的是<code>post</code>这个布局，也就是在<code>source</code>文件夹下的<code>_post</code>里面。</p>\n<p><code>Hexo</code>有三种默认布局：<code>post</code>、<code>page</code>和<code>draft</code>，它们分别对应不同的路径，而您自定义的其他布局和<code>post</code>相同，都将储存到<code>source/_posts</code>文件夹。</p>\n<p>而new这个命令其实是：</p>\n<pre><code class=\"bash\">$ hexo new [layout] &lt;title&gt;</code></pre>\n<p>只不过这个<code>layout</code>默认是<code>post</code>罢了。</p>\n<p>如果你想另起一页，那么可以使用</p>\n<pre><code class=\"bash\">$ hexo new page newpage</code></pre>\n<p>系统会自动给你在<code>source</code>文件夹下创建一个<code>newpage</code>文件夹，以及<code>newpage</code>文件夹中的<code>index.md</code>，这样你访问的<code>newpage</code>对应的链接就是<a href=\"http://xxx.xxx/newpage\" target=\"_blank\" rel=\"noopener\">http://xxx.xxx/newpage</a></p>\n<p><code>draft</code>是草稿的意思，也就是你如果想写文章，又不希望被看到，那么可以</p>\n<pre><code class=\"bash\">$ hexo new draft newdraft</code></pre>\n<p>这样会在<code>source/_draft</code>中新建一个<code>newdraft.md</code>文件，如果你的草稿文件写的过程中，想要预览一下，那么可以使用</p>\n<pre><code class=\"bash\">$ hexo server --draft</code></pre>\n<p>在本地端口中开启服务预览。</p>\n<p>如果你的草稿文件写完了，想要发表到<code>post</code>中，</p>\n<pre><code class=\"bash\">$ hexo publish draft newdraft</code></pre>\n<p>就会自动把<code>newdraft.md</code>发送到<code>post</code>中。</p>\n<h2 id=\"定制\"><a href=\"#定制\" class=\"headerlink\" title=\"定制\"></a>定制</h2><h3 id=\"主题更换\"><a href=\"#主题更换\" class=\"headerlink\" title=\"主题更换\"></a>主题更换</h3><p>进入博客根目录下，右键Git Bash G+Here，执行下面的指令</p>\n<pre><code class=\"bash\">$ git clone -b develop https://github.com/blinkfox/hexo-theme-matery themes/matery</code></pre>\n<p>此时主题文件夹下会多出一个matery主题。</p>\n<p>然后再更改根目录下的_config.yml配置文件。找到<code>themes:</code>，将他的值改为<code>matery</code>。</p>\n<p>此时你可以<code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</code></p>\n<p>本地预览<code>matery</code>主题的效果</p>\n<p>关于<code>matery</code>主题：</p>\n<blockquote>\n<p>这是一个采用 <code>Material Design</code> 和响应式设计的 Hexo 博客主题</p>\n<p>QQ 交流群1（已满）: <code>926552981</code> | QQ 交流群2（推荐）: <code>971887688</code></p>\n</blockquote>\n<p>特性：</p>\n<ul>\n<li>简单漂亮，文章内容美观易读</li>\n<li><a href=\"https://material.io/\" target=\"_blank\" rel=\"noopener\">Material Design</a> 设计</li>\n<li>响应式设计，博客在桌面端、平板、手机等设备上均能很好的展现</li>\n<li>首页轮播文章及每天动态切换 <code>Banner</code> 图片</li>\n<li>瀑布流式的博客文章列表（文章无特色图片时会有 <code>24</code> 张漂亮的图片代替）</li>\n<li>时间轴式的归档页</li>\n<li><strong>词云</strong>的标签页和<strong>雷达图</strong>的分类页</li>\n<li>丰富的关于我页面（包括关于我、文章统计图、我的项目、我的技能、相册等）</li>\n<li>可自定义的数据的友情链接页面</li>\n<li>支持文章置顶和文章打赏</li>\n<li>支持 <code>MathJax</code></li>\n<li><code>TOC</code> 目录</li>\n<li>可设置复制文章内容时追加版权信息</li>\n<li>可设置阅读文章时做密码验证</li>\n<li><a href=\"https://gitalk.github.io/\" target=\"_blank\" rel=\"noopener\">Gitalk</a>、<a href=\"https://imsun.github.io/gitment/\" target=\"_blank\" rel=\"noopener\">Gitment</a>、<a href=\"https://valine.js.org/\" target=\"_blank\" rel=\"noopener\">Valine</a> 和 <a href=\"https://disqus.com/\" target=\"_blank\" rel=\"noopener\">Disqus</a> 评论模块（推荐使用 <code>Gitalk</code>）</li>\n<li>集成了<a href=\"http://busuanzi.ibruce.info/\" target=\"_blank\" rel=\"noopener\">不蒜子统计</a>、谷歌分析（<code>Google Analytics</code>）和文章字数统计等功能</li>\n<li>支持在首页的音乐播放和视频播放功能</li>\n<li>支持<code>emoji</code>表情，用<code>markdown emoji</code>语法书写直接生成对应的能<strong>跳跃</strong>的表情。</li>\n<li>支持 <a href=\"http://www.daovoice.io/\" target=\"_blank\" rel=\"noopener\">DaoVoice</a>、<a href=\"https://www.tidio.com/\" target=\"_blank\" rel=\"noopener\">Tidio</a> 在线聊天功能。</li>\n</ul>\n<h3 id=\"新建分类categories\"><a href=\"#新建分类categories\" class=\"headerlink\" title=\"新建分类categories\"></a>新建分类categories</h3><p><code>categories</code> 页是用来展示所有分类的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>categories/index.md</code> 文件，那么你就需要新建一个，命令如下：</p>\n<pre><code class=\"bash\">$ hexo new page &quot;categories&quot;</code></pre>\n<p>编辑你刚刚新建的页面文件 <code>/source/categories/index.md</code>，至少需要以下内容：</p>\n<pre><code>---\ntitle: categories\ndate: 2018-09-30 17:25:30\ntype: &quot;categories&quot;\nlayout: &quot;categories&quot;\n---</code></pre><h3 id=\"新建标签-tags-页\"><a href=\"#新建标签-tags-页\" class=\"headerlink\" title=\"新建标签 tags 页\"></a>新建标签 tags 页</h3><p><code>tags</code> 页是用来展示所有标签的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>tags/index.md</code> 文件，那么你就需要新建一个，命令如下：</p>\n<pre><code class=\"bash\">$ hexo new page &quot;tags&quot;</code></pre>\n<p>编辑你刚刚新建的页面文件 <code>/source/tags/index.md</code>，至少需要以下内容：</p>\n<pre><code>---\ntitle: tags\ndate: 2018-09-30 18:23:38\ntype: &quot;tags&quot;\nlayout: &quot;tags&quot;\n---</code></pre><h3 id=\"新建about关于我页\"><a href=\"#新建about关于我页\" class=\"headerlink\" title=\"新建about关于我页\"></a>新建about关于我页</h3><p><code>about</code> 页是用来展示<strong>关于我和我的博客</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>about/index.md</code> 文件，那么你就需要新建一个，命令如下：</p>\n<pre><code class=\"bash\">$ hexo new page &quot;about&quot;</code></pre>\n<p>编辑你刚刚新建的页面文件 <code>/source/about/index.md</code>，至少需要以下内容：</p>\n<pre><code>---\ntitle: about\ndate: 2018-09-30 17:25:30\ntype: &quot;about&quot;\nlayout: &quot;about&quot;\n---</code></pre><h3 id=\"新建留言板contact页\"><a href=\"#新建留言板contact页\" class=\"headerlink\" title=\"新建留言板contact页\"></a>新建留言板contact页</h3><p><code>contact</code> 页是用来展示<strong>留言板</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>contact/index.md</code> 文件，那么你就需要新建一个，命令如下：</p>\n<pre><code class=\"bash\">$ hexo new page &quot;contact&quot;</code></pre>\n<p>编辑你刚刚新建的页面文件 <code>/source/contact/index.md</code>，至少需要以下内容：</p>\n<pre><code>---\ntitle: contact\ndate: 2018-09-30 17:25:30\ntype: &quot;contact&quot;\nlayout: &quot;contact&quot;\n---</code></pre><blockquote>\n<p><strong>注</strong>：本留言板功能依赖于第三方评论系统，请<strong>激活</strong>你的评论系统才有效果。并且在主题的 <code>_config.yml</code> 文件中，第 <code>19</code> 至 <code>21</code> 行的“<strong>菜单</strong>”配置，取消关于留言板的注释即可</p>\n</blockquote>\n<h3 id=\"新建友情链接friends页\"><a href=\"#新建友情链接friends页\" class=\"headerlink\" title=\"新建友情链接friends页\"></a>新建友情链接friends页</h3><p><code>friends</code> 页是用来展示<strong>友情连接</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>friends/index.md</code> 文件，那么你就需要新建一个，命令如下：</p>\n<pre><code class=\"bash\">$ hexo new page &quot;friends&quot;</code></pre>\n<p>编辑你刚刚新建的页面文件 <code>/source/friends/index.md</code>，至少需要以下内容：</p>\n<pre><code>---\ntitle: friends\ndate: 2018-12-12 21:25:30\ntype: &quot;friends&quot;\nlayout: &quot;friends&quot;\n---</code></pre><p>同时，在你的博客 <code>source</code> 目录下新建 <code>_data</code> 目录，在 <code>_data</code> 目录中新建 <code>friends.json</code> 文件，文件内容如下所示：</p>\n<pre><code class=\"json\">[{\n    &quot;avatar&quot;: &quot;http://image.luokangyuan.com/1_qq_27922023.jpg&quot;,\n    &quot;name&quot;: &quot;码酱&quot;,\n    &quot;introduction&quot;: &quot;我不是大佬，只是在追寻大佬的脚步&quot;,\n    &quot;url&quot;: &quot;http://luokangyuan.com/&quot;,\n    &quot;title&quot;: &quot;前去学习&quot;\n}, {\n    &quot;avatar&quot;: &quot;http://image.luokangyuan.com/4027734.jpeg&quot;,\n    &quot;name&quot;: &quot;闪烁之狐&quot;,\n    &quot;introduction&quot;: &quot;编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬&quot;,\n    &quot;url&quot;: &quot;https://blinkfox.github.io/&quot;,\n    &quot;title&quot;: &quot;前去学习&quot;\n}, {\n    &quot;avatar&quot;: &quot;http://image.luokangyuan.com/avatar.jpg&quot;,\n    &quot;name&quot;: &quot;ja_rome&quot;,\n    &quot;introduction&quot;: &quot;平凡的脚步也可以走出伟大的行程&quot;,\n    &quot;url&quot;: &quot;https://me.csdn.net/jlh912008548&quot;,\n    &quot;title&quot;: &quot;前去学习&quot;\n}]</code></pre>\n<h3 id=\"菜单导航配置\"><a href=\"#菜单导航配置\" class=\"headerlink\" title=\"菜单导航配置\"></a>菜单导航配置</h3><ul>\n<li>配置基本菜单导航的名称、路径url和图标icon.</li>\n</ul>\n<p>菜单导航名称可以是中文也可以是英文(如：<code>Index</code>或<code>主页</code>) 2.图标icon 可以在<a href=\"https://fontawesome.com/icons\" target=\"_blank\" rel=\"noopener\">Font Awesome</a> 中查找</p>\n<pre><code class=\"yml\">menu:\n  Index:\n    url: /\n    icon: fas fa-home\n  Tags:\n    url: /tags\n    icon: fas fa-tags\n  Categories:\n    url: /categories\n    icon: fas fa-bookmark\n  Archives:\n    url: /archives\n    icon: fas fa-archive\n  About:\n    url: /about\n    icon: fas fa-user-circle\n  Friends:\n    url: /friends\n    icon: fas fa-address-book</code></pre>\n<ul>\n<li>二级菜单配置方法</li>\n</ul>\n<p>如果你需要二级菜单则可以在原基本菜单导航的基础上如下操作<br>1.在需要添加二级菜单的一级菜单下添加<code>children</code>关键字(如:<code>About</code>菜单下添加<code>children</code>)<br>2.在<code>children</code>下创建二级菜单的 名称name,路径url和图标icon.<br>3.注意每个二级菜单模块前要加 <code>-</code>.<br>4.注意缩进格式</p>\n<pre><code class=\"yml\">menu:\n  Index:\n    url: /\n    icon: fas fa-home\n  Tags:\n    url: /tags\n    icon: fas fa-tags\n  Categories:\n    url: /categories\n    icon: fas fa-bookmark\n  Archives:\n    url: /archives\n    icon: fas fa-archive\n  About:\n    url: /about\n    icon: fas fa-user-circle-o\n  Friends:\n    url: /friends\n    icon: fas fa-address-book\n  Medias:\n    icon: fas fa-list\n    children:\n      - name: Musics\n        url: /musics\n        icon: fas fa-music\n      - name: Movies\n        url: /movies\n        icon: fas fa-film\n      - name: Books\n        url: /books\n        icon: fas fa-book\n      - name: Galleries\n        url: /galleries\n        icon: fas fa-image</code></pre>\n<p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后就可以在文章中对应位置看到你用<code>emoji</code>语法写的表情了。</p>\n<h3 id=\"代码高亮\"><a href=\"#代码高亮\" class=\"headerlink\" title=\"代码高亮\"></a>代码高亮</h3><p>由于 Hexo 自带的代码高亮主题显示不好看，所以主题中使用到了 <a href=\"https://github.com/ele828/hexo-prism-plugin\" target=\"_blank\" rel=\"noopener\">hexo-prism-plugin</a> 的 Hexo 插件来做代码高亮，安装命令如下：</p>\n<pre><code class=\"bash\">$ npm i -S hexo-prism-plugin</code></pre>\n<p>然后，修改 Hexo 根目录下 <code>_config.yml</code> 文件中 <code>highlight.enable</code> 的值为 <code>false</code>，并新增 <code>prism</code> 插件相关的配置，主要配置如下：</p>\n<pre><code class=\"yml\">highlight:\n  enable: false\n\nprism_plugin:\n  mode: &#39;preprocess&#39;    # realtime/preprocess\n  theme: &#39;tomorrow&#39;\n  line_number: false    # default false\n  custom_css:</code></pre>\n<h3 id=\"搜索\"><a href=\"#搜索\" class=\"headerlink\" title=\"搜索\"></a>搜索</h3><p>本主题中还使用到了 <a href=\"https://github.com/wzpan/hexo-generator-search\" target=\"_blank\" rel=\"noopener\">hexo-generator-search</a> 的 Hexo 插件来做内容搜索，安装命令如下：</p>\n<pre><code class=\"bash\">$ npm install hexo-generator-search --save</code></pre>\n<p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p>\n<pre><code class=\"yml\">search:\n  path: search.xml\n  field: post</code></pre>\n<h3 id=\"中文链接转拼音\"><a href=\"#中文链接转拼音\" class=\"headerlink\" title=\"中文链接转拼音\"></a>中文链接转拼音</h3><p>如果你的文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文，这样不利于 <code>SEO</code>，且 <code>gitment</code> 评论对中文链接也不支持。我们可以用 <a href=\"https://github.com/viko16/hexo-permalink-pinyin\" target=\"_blank\" rel=\"noopener\">hexo-permalink-pinyin</a> Hexo 插件使在生成文章时生成中文拼音的永久链接。</p>\n<p>安装命令如下：</p>\n<pre><code class=\"bash\">$ npm i hexo-permalink-pinyin --save</code></pre>\n<p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p>\n<pre><code class=\"yml\">permalink_pinyin:\n  enable: true\n  separator: &#39;-&#39; # default: &#39;-&#39;</code></pre>\n<blockquote>\n<p><strong>注</strong>：除了此插件外，<a href=\"https://github.com/rozbo/hexo-abbrlink\" target=\"_blank\" rel=\"noopener\">hexo-abbrlink</a> 插件也可以生成非中文的链接。</p>\n</blockquote>\n<h3 id=\"文章字数统计插件\"><a href=\"#文章字数统计插件\" class=\"headerlink\" title=\"文章字数统计插件\"></a>文章字数统计插件</h3><p>如果你想要在文章中显示文章字数、阅读时长信息，可以安装 <a href=\"https://github.com/willin/hexo-wordcount\" target=\"_blank\" rel=\"noopener\">hexo-wordcount</a>插件。</p>\n<p>安装命令如下：</p>\n<pre><code class=\"bash\">$ npm i --save hexo-wordcount</code></pre>\n<p>然后只需在本主题下的 <code>_config.yml</code> 文件中，将各个文章字数相关的配置激活即可：</p>\n<pre><code class=\"yml\">postInfo:\n  date: true\n  update: false\n  wordCount: true # 设置文章字数统计为 true.\n  totalCount: true # 设置站点文章总字数统计为 true.\n  min2read: true # 阅读时长.\n  readCount: true # 阅读次数.</code></pre>\n<h3 id=\"添加emoji表情支持\"><a href=\"#添加emoji表情支持\" class=\"headerlink\" title=\"添加emoji表情支持\"></a>添加emoji表情支持</h3><p>本主题新增了对<code>emoji</code>表情的支持，使用到了 <a href=\"https://npm.taobao.org/package/hexo-filter-github-emojis\" target=\"_blank\" rel=\"noopener\">hexo-filter-github-emojis</a> 的 Hexo 插件来支持 <code>emoji</code>表情的生成，把对应的<code>markdown emoji</code>语法（<code>::</code>,例如：<code>:smile:</code>）转变成会跳跃的<code>emoji</code>表情，安装命令如下：</p>\n<pre><code class=\"bash\">$ npm install hexo-filter-github-emojis --save</code></pre>\n<p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p>\n<pre><code class=\"yml\">githubEmojis:\n  enable: true\n  className: github-emoji\n  inject: true\n  styles:\n  customEmojis:</code></pre>\n<h3 id=\"添加-RSS-订阅支持\"><a href=\"#添加-RSS-订阅支持\" class=\"headerlink\" title=\"添加 RSS 订阅支持\"></a>添加 RSS 订阅支持</h3><p>本主题中还使用到了 <a href=\"https://github.com/hexojs/hexo-generator-feed\" target=\"_blank\" rel=\"noopener\">hexo-generator-feed</a> 的 Hexo 插件来做 <code>RSS</code>，安装命令如下：</p>\n<pre><code class=\"bash\">$ npm install hexo-generator-feed --save</code></pre>\n<p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p>\n<pre><code class=\"yml\">feed:\n  type: atom\n  path: atom.xml\n  limit: 20\n  hub:\n  content:\n  content_limit: 140\n  content_limit_delim: &#39; &#39;\n  order_by: -date</code></pre>\n<p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后在 <code>public</code> 文件夹中即可看到 <code>atom.xml</code> 文件，说明你已经安装成功了。</p>\n<h3 id=\"添加-DaoVoice-在线聊天功能\"><a href=\"#添加-DaoVoice-在线聊天功能\" class=\"headerlink\" title=\"添加 DaoVoice 在线聊天功能\"></a>添加 <a href=\"http://www.daovoice.io/\" target=\"_blank\" rel=\"noopener\">DaoVoice</a> 在线聊天功能</h3><p>前往 <a href=\"http://www.daovoice.io/\" target=\"_blank\" rel=\"noopener\">DaoVoice</a> 官网注册并且获取 <code>app_id</code>，并将 <code>app_id</code> 填入主题的 <code>_config.yml</code> 文件中。</p>\n<h3 id=\"添加-Tidio-在线聊天功能\"><a href=\"#添加-Tidio-在线聊天功能\" class=\"headerlink\" title=\"添加 Tidio 在线聊天功能\"></a>添加 <a href=\"https://www.tidio.com/\" target=\"_blank\" rel=\"noopener\">Tidio</a> 在线聊天功能</h3><p>前往 <a href=\"https://www.tidio.com/\" target=\"_blank\" rel=\"noopener\">Tidio</a> 官网注册并且获取 <code>Public Key</code>，并将 <code>Public Key</code> 填入主题的 <code>_config.yml</code> 文件中。</p>\n<h3 id=\"修改页脚\"><a href=\"#修改页脚\" class=\"headerlink\" title=\"修改页脚\"></a>修改页脚</h3><p>页脚信息可能需要做定制化修改，而且它不便于做成配置信息，所以可能需要你自己去再修改和加工。修改的地方在主题文件的 <code>/layout/_partial/footer.ejs</code> 文件中，包括站点、使用的主题、访问量等。</p>\n<h3 id=\"修改社交链接\"><a href=\"#修改社交链接\" class=\"headerlink\" title=\"修改社交链接\"></a>修改社交链接</h3><p>在主题的 <code>_config.yml</code> 文件中，默认支持 <code>QQ</code>、<code>GitHub</code> 和邮箱等的配置，你可以在主题文件的 <code>/layout/_partial/social-link.ejs</code> 文件中，新增、修改你需要的社交链接地址，增加链接可参考如下代码：</p>\n<pre><code class=\"html\">&lt;% if (theme.socialLink.github) { %&gt;\n    &lt;a href=&quot;&lt;%= theme.socialLink.github %&gt;&quot; class=&quot;tooltipped&quot; target=&quot;_blank&quot; data-tooltip=&quot;访问我的GitHub&quot; data-position=&quot;top&quot; data-delay=&quot;50&quot;&gt;\n        &lt;i class=&quot;fab fa-github&quot;&gt;&lt;/i&gt;\n    &lt;/a&gt;\n&lt;% } %&gt;</code></pre>\n<p>其中，社交图标（如：<code>fa-github</code>）你可以在 <a href=\"https://fontawesome.com/icons\" target=\"_blank\" rel=\"noopener\">Font Awesome</a> 中搜索找到。以下是常用社交图标的标识，供你参考：</p>\n<ul>\n<li>Facebook: <code>fab fa-facebook</code></li>\n<li>Twitter: <code>fab fa-twitter</code></li>\n<li>Google-plus: <code>fab fa-google-plus</code></li>\n<li>Linkedin: <code>fab fa-linkedin</code></li>\n<li>Tumblr: <code>fab fa-tumblr</code></li>\n<li>Medium: <code>fab fa-medium</code></li>\n<li>Slack: <code>fab fa-slack</code></li>\n<li>Sina Weibo: <code>fab fa-weibo</code></li>\n<li>Wechat: <code>fab fa-weixin</code></li>\n<li>QQ: <code>fab fa-qq</code></li>\n<li>Zhihu: <code>fab fa-zhihu</code></li>\n</ul>\n<blockquote>\n<p><strong>注意</strong>: 本主题中使用的 <code>Font Awesome</code> 版本为 <code>5.11.0</code>。</p>\n</blockquote>\n<h3 id=\"修改打赏的二维码图片\"><a href=\"#修改打赏的二维码图片\" class=\"headerlink\" title=\"修改打赏的二维码图片\"></a>修改打赏的二维码图片</h3><p>在主题文件的 <code>source/medias/reward</code> 文件中，你可以替换成你的的微信和支付宝的打赏二维码图片。</p>\n<h3 id=\"文章加密\"><a href=\"#文章加密\" class=\"headerlink\" title=\"文章加密\"></a>文章加密</h3><p>主题 <code>config.yml</code> 配置文件中激活 <code>verifyPassword.enable: true</code> </p>\n<p>在你所需要加密的文章中的 <code>Front-Matter</code> 中添加 <code>password</code> 属性，<code>password</code>的值为你的原密码经过 SHA256 加密后的值。访问文章就需要输入密码了，输入的为原密码。</p>\n<h3 id=\"配置音乐播放器\"><a href=\"#配置音乐播放器\" class=\"headerlink\" title=\"配置音乐播放器\"></a>配置音乐播放器</h3><p>要支持音乐播放，在主题的 <code>_config.yml</code> 配置文件中激活music配置即可：</p>\n<pre><code class=\"yml\">music:\n  enable: true\n  title: 听听音乐 #非吸底模式有效\n    enable: true\n    show: 听听音乐\n  server: netease   #require    music platform: netease, tencent, kugou, xiami, baidu\n  type: playlist    #require song, playlist, album, search, artist\n  id: 503838841     #require    song id / playlist id / album id / search keyword\n  fixed: false       # 开启吸底模式\n  autoplay: false   # 是否自动播放\n  theme: &#39;#42b983&#39;\n  loop: &#39;all&#39;       # 音频循环播放, 可选值: &#39;all&#39;, &#39;one&#39;, &#39;none&#39;\n  order: &#39;random&#39;   # 音频循环顺序, 可选值: &#39;list&#39;, &#39;random&#39;\n  preload: &#39;auto&#39;   # 预加载，可选值: &#39;none&#39;, &#39;metadata&#39;, &#39;auto&#39;\n  volume: 0.7       # 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效\n  listFolded: true  # 列表默认折叠</code></pre>\n<blockquote>\n<p><code>server</code>可选网<code>netease</code>（网易云音乐），<code>tencent</code>（QQ音乐），<code>kugou</code>（酷狗音乐），<code>xiami</code>（虾米音乐），</p>\n<p><code>baidu</code>（百度音乐）。</p>\n<p><code>type</code>可选<code>song</code>（歌曲），<code>playlist</code>（歌单），<code>album</code>（专辑），<code>search</code>（搜索关键字），<code>artist</code>（歌手）</p>\n<p><code>id</code>获取方法：网页打开例如网易云音乐，点击一个推荐的歌单，地址栏会有一个<code>id</code>，<code>id</code>即为这串数字。其中search的id为搜索的关键字。</p>\n</blockquote>\n<h3 id=\"文章-Front-matter-介绍\"><a href=\"#文章-Front-matter-介绍\" class=\"headerlink\" title=\"文章 Front-matter 介绍\"></a>文章 Front-matter 介绍</h3><h3 id=\"Front-matter-选项详解\"><a href=\"#Front-matter-选项详解\" class=\"headerlink\" title=\"Front-matter 选项详解\"></a>Front-matter 选项详解</h3><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。但我仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p>\n<table>\n<thead>\n<tr>\n<th>配置选项</th>\n<th>默认值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>title</td>\n<td><code>Markdown</code> 的文件标题</td>\n<td>文章标题，强烈建议填写此选项</td>\n</tr>\n<tr>\n<td>date</td>\n<td>文件创建时的日期时间</td>\n<td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td>\n</tr>\n<tr>\n<td>author</td>\n<td>根 <code>_config.yml</code> 中的 <code>author</code></td>\n<td>文章作者</td>\n</tr>\n<tr>\n<td>img</td>\n<td><code>featureImages</code> 中的某个值</td>\n<td>文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td>\n</tr>\n<tr>\n<td>top</td>\n<td><code>true</code></td>\n<td>推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td>\n</tr>\n<tr>\n<td>cover</td>\n<td><code>false</code></td>\n<td><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td>\n</tr>\n<tr>\n<td>coverImg</td>\n<td>无</td>\n<td><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td>\n</tr>\n<tr>\n<td>password</td>\n<td>无</td>\n<td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td>\n</tr>\n<tr>\n<td>toc</td>\n<td><code>true</code></td>\n<td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td>\n</tr>\n<tr>\n<td>mathjax</td>\n<td><code>false</code></td>\n<td>是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td>\n</tr>\n<tr>\n<td>summary</td>\n<td>无</td>\n<td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td>\n</tr>\n<tr>\n<td>categories</td>\n<td>无</td>\n<td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td>\n</tr>\n<tr>\n<td>tags</td>\n<td>无</td>\n<td>文章标签，一篇文章可以多个标签</td>\n</tr>\n<tr>\n<td>keywords</td>\n<td>文章标题</td>\n<td>文章关键字，SEO 时需要</td>\n</tr>\n<tr>\n<td>reprintPolicy</td>\n<td>cc_by</td>\n<td>文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p><strong>注意</strong>:</p>\n<ol>\n<li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章都的特色图<strong>各有特色</strong>。</li>\n<li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li>\n<li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：<a href=\"http://tool.oschina.net/encrypt?type=2\" target=\"_blank\" rel=\"noopener\">开源中国在线工具</a>、<a href=\"http://encode.chahuo.com/\" target=\"_blank\" rel=\"noopener\">chahuo</a>、<a href=\"http://tool.chinaz.com/tools/hash.aspx\" target=\"_blank\" rel=\"noopener\">站长工具</a>。</li>\n<li>您可以在文章md文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则</li>\n</ol>\n</blockquote>\n<p>以下为文章的 <code>Front-matter</code> 示例。</p>\n<h3 id=\"最简示例\"><a href=\"#最简示例\" class=\"headerlink\" title=\"最简示例\"></a>最简示例</h3><pre><code class=\"markdown\">---\ntitle: typora-vue-theme主题介绍\ndate: 2018-09-07 09:25:00\n---</code></pre>\n<h3 id=\"最全示例\"><a href=\"#最全示例\" class=\"headerlink\" title=\"最全示例\"></a>最全示例</h3><pre><code class=\"markdown\">---\ntitle: typora-vue-theme主题介绍\ndate: 2018-09-07 09:25:00\nauthor: 赵奇\nimg: /source/images/xxx.jpg\ntop: true\ncover: true\ncoverImg: /images/1.jpg\npassword: 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92\ntoc: false\nmathjax: false\nsummary: 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要\ncategories: Markdown\ntags:\n  - Typora\n  - Markdown\n---</code></pre>\n<p>在本主题的 <code>_config.yml</code> 中可以修改部分自定义信息，有以下几个部分：</p>\n<ul>\n<li>菜单</li>\n<li>我的梦想</li>\n<li>首页的音乐播放器和视频播放器配置</li>\n<li>是否显示推荐文章名称和按钮配置</li>\n<li><code>favicon</code> 和 <code>Logo</code></li>\n<li>个人信息</li>\n<li>TOC 目录</li>\n<li>文章打赏信息</li>\n<li>复制文章内容时追加版权信息</li>\n<li>MathJax</li>\n<li>文章字数统计、阅读时长</li>\n<li>点击页面的’爱心’效果</li>\n<li>我的项目</li>\n<li>我的技能</li>\n<li>我的相册</li>\n<li><code>Gitalk</code>、<code>Gitment</code>、<code>Valine</code> 和 <code>disqus</code> 评论配置</li>\n<li><a href=\"http://busuanzi.ibruce.info/\" target=\"_blank\" rel=\"noopener\">不蒜子统计</a>和谷歌分析（<code>Google Analytics</code>）</li>\n<li>默认特色图的集合。当文章没有设置特色图时，本主题会根据文章标题的 <code>hashcode</code> 值取余，来选择展示对应的特色图</li>\n</ul>\n<h3 id=\"修改主题颜色\"><a href=\"#修改主题颜色\" class=\"headerlink\" title=\"修改主题颜色\"></a>修改主题颜色</h3><p>主题会有一层变换的颜色笼罩在背景图上，在主题文件的 <code>/source/css/matery.css</code> 文件中，搜索 <code>.bg-color</code> 来修改背景颜色：</p>\n<pre><code class=\"css\">/* 整体背景颜色，包括导航、移动端的导航、页尾、标签页等的背景颜色. */\n.bg-color {\n    background-image: linear-gradient(to right, #4cbf30 0%, #0f9d58 100%);\n}\n\n@-webkit-keyframes rainbow {\n   /* 动态切换背景颜色. */\n}\n\n@keyframes rainbow {\n    /* 动态切换背景颜色. */\n}\n/*如果不需要，可以将上面三个注释掉*/</code></pre>\n<p>如果不需要的话，直接将上面三个注释掉即可。</p>\n<h3 id=\"修改-banner-图和文章特色图\"><a href=\"#修改-banner-图和文章特色图\" class=\"headerlink\" title=\"修改 banner 图和文章特色图\"></a>修改 banner 图和文章特色图</h3><p>你可以直接在 <code>/source/medias/banner</code> 文件夹中更换你喜欢的 <code>banner</code> 图片，主题代码中是每天切换一张，只需 <code>7</code> 张即可。如果你会 <code>JavaScript</code> 代码，可以修改成你自己喜欢切换逻辑，如：随机切换等，<code>banner</code> 切换的代码位置在 <code>/layout/_partial/bg-cover-content.ejs</code> 文件的 `` 代码中：</p>\n<pre><code class=\"html\">$(&#39;.bg-cover&#39;).css(&#39;background-image&#39;, &#39;url(/medias/banner/&#39; + new Date().getDay() + &#39;.jpg)&#39;);</code></pre>\n<p>如想每小时切换,将<code>getDay()</code>改为<code>getHours()</code>即可,但是需要增加图片的数量为24，且在_config.yml中做修改相应。</p>\n<p>在 <code>/source/medias/featureimages</code> 文件夹中默认有 24 张特色图片，你可以再增加或者减少，并需要在 <code>_config.yml</code> 做同步修改。</p>\n<h3 id=\"添加文章评论插件\"><a href=\"#添加文章评论插件\" class=\"headerlink\" title=\"添加文章评论插件\"></a>添加文章评论插件</h3><p>主题自带<code>gittalk</code>,<code>gitment</code>,<code>valine</code>等评论插件，只需要去相应的官网注册，然后将相应的配置填入到主题的<code>_config.yml</code>中相应位置即可。</p>\n<p>注：<code>gitalk</code>评论模块对文字表格有影响，并且经常加载不出来。</p>\n<h2 id=\"优化\"><a href=\"#优化\" class=\"headerlink\" title=\"优化\"></a>优化</h2><h3 id=\"配置CDN\"><a href=\"#配置CDN\" class=\"headerlink\" title=\"配置CDN\"></a>配置CDN</h3><p>cdn加速，只需要将主题文件夹下的<code>_config.yml</code>最后遗一行配置即可。后面填<code>https://cdn.jsdelivr.net/gh/</code>加上你的github账户名和你的博客地址，例如我的：</p>\n<pre><code class=\"yaml\">jsDelivr:\n  url: https://cdn.jsdelivr.net/gh/axh2018/axh2018.github.io</code></pre>\n<h3 id=\"压缩代码\"><a href=\"#压缩代码\" class=\"headerlink\" title=\"压缩代码\"></a>压缩代码</h3><p>安装插件：</p>\n<pre><code class=\"bash\">npm install hexo-neat --save</code></pre>\n<p>在根目录配置文件 <code>_config.yml</code> 末尾加入以下配置：</p>\n<pre><code class=\"yaml\">#hexo-neat 优化提速插件（去掉HTML、css、js的blank字符）\nneat_enable: true\nneat_html:\n  enable: true\n  exclude:\n    - &#39;**/*.md&#39;\nneat_css:\n  enable: true\n  exclude:\n    - &#39;**/*.min.css&#39;\nneat_js:\n  enable: true\n  mangle: true\n  output:\n  compress:\n  exclude:\n    - &#39;**/*.min.js&#39;\n    - &#39;**/**/instantpage.js&#39;\n    - &#39;**/matery.js&#39;</code></pre>\n<h3 id=\"新建404页面\"><a href=\"#新建404页面\" class=\"headerlink\" title=\"新建404页面\"></a>新建404页面</h3><p>主题并没有404页面，所以我们来添加一个，<code>source</code>目录下新建一个<code>404.md</code>，内容：</p>\n<pre><code class=\"markdown\">title: 404\ndate: 2020-2-22 19:20:00\ntype: &quot;404&quot;\nlayout: &quot;404&quot;\ndescription: &quot;Oops～，我崩溃了！找不到你想要的页面 :(&quot;</code></pre>\n<p>接着在/matery/layout/新建一个404.ejs文件，内容：</p>\n<pre><code class=\"html\">&lt;style type=&quot;text/css&quot;&gt;\n    /* don&#39;t remove. */\n    .about-cover {\n        height: 75vh;\n    }\n&lt;/style&gt;\n&lt;div class=&quot;bg-cover pd-header about-cover&quot;&gt;\n    &lt;div class=&quot;container&quot;&gt;\n        &lt;div class=&quot;row&quot;&gt;\n            &lt;div class=&quot;col s10 offset-s1 m8 offset-m2 l8 offset-l2&quot;&gt;\n                &lt;div class=&quot;brand&quot;&gt;\n                    &lt;div class=&quot;title center-align&quot;&gt;\n                        404\n                    &lt;/div&gt;\n                    &lt;div class=&quot;description center-align&quot;&gt;\n                        &lt;%= page.description %&gt;\n                    &lt;/div&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n&lt;script&gt;\n    // 每天切换 banner 图. \n    $(&#39;.bg-cover&#39;).css(&#39;background-image&#39;, &#39;url(/medias/banner/&#39; + new Date().getDay() + &#39;.jpg)&#39;);\n&lt;/script&gt;</code></pre>\n<h3 id=\"文章生成永久链接\"><a href=\"#文章生成永久链接\" class=\"headerlink\" title=\"文章生成永久链接\"></a>文章生成永久链接</h3><p>主题默认的文章链接配置</p>\n<pre><code class=\"yaml\">premalink: :year/:month/:day/:title</code></pre>\n<p>这种生成的链接地址很长，我们可以修改文章生成链接的格式。</p>\n<p>首先再根目录下执行下面的命令：</p>\n<pre><code class=\"bash\">$ npm install hexo-abbrlink --save</code></pre>\n<p>在博客文件夹根目录下<code>_config.yml</code>添加如下配置</p>\n<pre><code class=\"yml\">abbrlink:\n    alg: crc16   #算法： crc16(default) and crc32\n    rep: hex     #进制： dec(default) and hex: dec \n                #输出进制：十进制和十六进制，默认为10进制。丨dec为十进制，hex为十六进制</code></pre>\n<p>再将站点配置文件的<code>permalink</code>的值修改为：</p>\n<pre><code class=\"yml\">permalink: posts/:abbrlink.html</code></pre>\n<p>生成文章的链接格式格式如下（官方样例）:</p>\n<pre><code class=\"yml\">crc16 &amp; hex\nhttps://post.zz173.com/posts/66c8.html\n\ncrc16 &amp; dec\nhttps://post.zz173.com/posts/65535.html\ncrc32 &amp; hex\nhttps://post.zz173.com/posts/8ddf18fb.html\n\ncrc32 &amp; dec\nhttps://post.zz173.com/posts/1690090958.html</code></pre>\n<p>生成完后，原md文件的Front-matter 内会增加<code>abbrlink</code> 字段，值为生成的ID 。这个字段确保了在我们修改了<code>Front-matter</code> 内的博客标题title或创建日期date字段之后而不会改变链接地址。</p>\n<h3 id=\"图片懒加载\"><a href=\"#图片懒加载\" class=\"headerlink\" title=\"图片懒加载\"></a>图片懒加载</h3><p><code>懒加载</code>一般是当图片滚动进可视窗口内才加载图片，可视窗口之外的图片则不加载</p>\n<p>本主题图片进行懒加载，这样做效果就是 <code>html</code>、<code>css</code>、<code>js</code> 加载之后，图片再加载。既保证了网页的打开速度，也不会因图片的庞大体积而拖累了整个页面的加载。</p>\n<p>先安装插件：</p>\n<pre><code class=\"bash\">npm install hexo-lazyload-image --save</code></pre>\n<p>然后到博客根目录下<code>_config.yml</code>中加入以下字段：</p>\n<pre><code class=\"yaml\"># 懒加载\nlazyload:\n  enable: true # 是否开启图片懒加载\n  onlypost: false # 是否只对文章的图片做懒加载\n  loadingImg: /images/loading.gif</code></pre>\n<p>其中gif图的位置应该放在<code>source/images/</code>下。</p>\n<h3 id=\"设置文字模板\"><a href=\"#设置文字模板\" class=\"headerlink\" title=\"设置文字模板\"></a>设置文字模板</h3><p><code>Hexo</code>的页面是包括一个<code>md</code>文件和<code>ejs</code>文件结合而成的，<code>md</code>文件中的内容是页面配置，基本信息，和显示的内容。而<code>ejs</code>文件就是<code>js</code>逻辑代码了。</p>\n<p>我们在<code>scaffolds/post.md</code>中设置文章的默认模板，这样以后创建文章的时候，这些信息就默认添加上了，不同文章你也可以修改这些信息。上面Front-matter已经介绍过了。</p>\n<pre><code class=\"markdown\">---\ntitle: {{ title }}\ndate: {{ date }}\nauthor: 布莱恩特科比酱\nimg:\ntop:\ncover:\ncoverImg:\npassword:\ntoc:\nmathjax:\nsummary:\ncategories:\ntags:\n---</code></pre>\n<h3 id=\"图片添加水印\"><a href=\"#图片添加水印\" class=\"headerlink\" title=\"图片添加水印\"></a>图片添加水印</h3><p>为了防止别人抄袭你文章，直接用你文字的图片，可以把所有的图片都加上水印。在博客根目录下新建一个<code>watermark.py</code>，代码如下：</p>\n<pre><code class=\"python\"># -*- coding: utf-8 -*-\nimport sys\nimport glob\nfrom PIL import Image\nfrom PIL import ImageDraw\nfrom PIL import ImageFont\n\ndef watermark(post_name):\n    if post_name == &#39;all&#39;:\n        post_name = &#39;*&#39;\n    dir_name = &#39;source/_posts/&#39; + post_name + &#39;/*&#39;\n    for files in glob.glob(dir_name):\n        im = Image.open(files)\n        if len(im.getbands()) &lt; 3:\n            im = im.convert(&#39;RGB&#39;)\n            print(files)\n        font = ImageFont.truetype(&#39;STSONG.TTF&#39;, max(30, int(im.size[1] / 20)))\n        draw = ImageDraw.Draw(im)\n        draw.text((im.size[0] / 2, im.size[1] / 2),\n                  u&#39;@hiyoung&#39;, fill=(0, 0, 0), font=font)\n        im.save(files)\n\nif __name__ == &#39;__main__&#39;:\n    if len(sys.argv) == 2:\n        watermark(sys.argv[1])\n    else:\n        print(&#39;[usage] &lt;input&gt;&#39;)</code></pre>\n<p>字体也放根目录下，自己找字体。然后每次写完一篇文章可以运行<code>python3 watermark.py postname</code>添加水印，如果第一次运行要给所有文章添加水印，可以运行<code>python3 watermark.py all</code>。</p>\n<p>这个代码的逻辑就是从文章目录下拿到图片，添加水印。这个前提是要文章的图片放在source/_posts/下，所以如果在文章中直接引用了其他地方的图片链接，那么这个脚本不会去给那个图片加水印了。</p>\n<h3 id=\"动态标签栏\"><a href=\"#动态标签栏\" class=\"headerlink\" title=\"动态标签栏\"></a>动态标签栏</h3><p>在<code>theme/matery/layout/layout.ejs</code>下添加如下代码：</p>\n<pre><code class=\"javascript\">&lt;script type= &quot;text/javascript&quot; &gt;\n    var OriginTitile=document.title,st;\n    document.addEventListener(&quot;visibilitychange&quot;,function()\n     {\n        document.hidden?(document.title=&quot;ヽ(●-`Д´-)ノ你要玩捉迷藏嘛&quot;,clearTimeout(st)):(document.title=&quot;(Ő∀Ő3)ノ被发现啦！&quot;,st=setTimeout(function(){\n            document.title=OriginTitile},3e3))\n    })\n&lt;/script&gt;</code></pre>\n<h3 id=\"修改导航栏颜色以及透明效果\"><a href=\"#修改导航栏颜色以及透明效果\" class=\"headerlink\" title=\"修改导航栏颜色以及透明效果\"></a>修改导航栏颜色以及透明效果</h3><p><code>themes/matery/source/css/matery.css</code>文件中，有一个<code>.bg-color</code>属性，修改其属性值即可，代码如下：</p>\n<pre><code class=\"css\">.bg-color {\n    background-image: linear-gradient(to right, #4cbf30 0%, #0f9d58 100%); \n    //修改成自己喜欢的颜色值\n    opacity: 0.8;  \n    //透明效果 值范围 0~1\n}</code></pre>\n<h3 id=\"外链跳转插件\"><a href=\"#外链跳转插件\" class=\"headerlink\" title=\"外链跳转插件\"></a>外链跳转插件</h3><p>跳转外链相关插件。自动为所有<code>html</code>文件中外链的<code>a</code>标签生成对应的属性。 比如 设置 <code>target=&#39;_blank&#39;</code>, <code>rel=&#39;external nofollow noopener noreferrer&#39;</code> 告诉搜索引擎这是外部链接,不要将该链接计入权重。 同时自动生成外链跳转页面,默认在根目录下<code>go.html</code>;</p>\n<p>安装插件：</p>\n<pre><code class=\"bash\">$ npm install hexo-external-link --save</code></pre>\n<p>配置插件：</p>\n<p>在<code>Hexo</code>根目录的<code>_config.yml</code>文件中添加如下配置。</p>\n<pre><code class=\"yml\">hexo_external_link:\n  enable: true\n  enable_base64_encode: true\n  url_param_name: &#39;u&#39;\n  html_file_name: &#39;go.html&#39;\n  target_blank: true\n  link_rel: &#39;external nofollow noopener noreferrer&#39;\n  domain: &#39;your_domain&#39; # 如果开启了防盗链\n  safety_chain: true</code></pre>\n<ul>\n<li><strong>enable</strong> - 是否开启<code>hexo_external_link</code>插件 - 默认 false</li>\n<li><strong>enable_base64_encode</strong> - 是否对跳转<code>url</code>使用<code>base64编码</code> - 默认 fasle</li>\n<li><strong>url_param_name</strong> - url参数名,在跳转到外链传递给<code>html_file_name</code>的参数名 - 默认 ‘u’</li>\n<li><strong>html_file_name</strong> - 跳转到外链的页面文件路径 - 默认 ‘go.html’</li>\n<li><strong>target_blank</strong> - 是否为外链的<code>a</code>标签添加<code>target=&#39;_blank&#39;</code> - 默认 true</li>\n<li><strong>link_rel</strong> - 设置外链的<code>a</code>标签的rel属性 - 默认 ‘external nofollow noopener noreferrer’</li>\n<li><strong>domain</strong> - 如果开启了防盗链,除了 localhost 和 domain 之外调用会跳到主页,同时也是判断链接是否为外链的依据 - 默认 window.location.host</li>\n<li><strong>safety_chain</strong> - go.html 为了防止外链盗用 对域名进行的判断 - 默认 false</li>\n</ul>\n<h3 id=\"添加鼠标点击烟花爆炸效果\"><a href=\"#添加鼠标点击烟花爆炸效果\" class=\"headerlink\" title=\"添加鼠标点击烟花爆炸效果\"></a>添加鼠标点击烟花爆炸效果</h3><p><code>themes/matery/source/js</code>目录下新建<code>fireworks.js</code>文件，打开<a href=\"https://github.com/axh2018/script/blob/master/fireworks.js\" target=\"_blank\" rel=\"noopener\"></a>将内容复制粘贴到<code>fireworks.js</code>。</p>\n<p>然后在<code>themes/matery/layout/layout.ejs</code>文件内添加以下内容：</p>\n<pre><code class=\"javascript\">&lt;canvas class=&quot;fireworks&quot; style=&quot;position: fixed;left: 0;top: 0;z-index: 1; pointer-events: none;&quot; &gt;&lt;/canvas&gt; \n&lt;script type=&quot;text/javascript&quot; src=&quot;//cdn.bootcss.com/animejs/2.2.0/anime.min.js&quot;&gt;&lt;/script&gt; \n&lt;script type=&quot;text/javascript&quot; src=&quot;/js/fireworks.js&quot;&gt;&lt;/script&gt;</code></pre>\n<h3 id=\"添加樱花飘落效果\"><a href=\"#添加樱花飘落效果\" class=\"headerlink\" title=\"添加樱花飘落效果\"></a>添加樱花飘落效果</h3><p>在<code>themes/matery/source/js</code>目录下新建<code>sakura.js</code>文件，打开<a href=\"https://github.com/axh2018/script/blob/master/sakura.js\" target=\"_blank\" rel=\"noopener\"></a><br>将内容复制粘贴到<code>sakura.js</code>。</p>\n<p>然后在<code>themes/matery/layout/layout.ejs</code>文件内添加以下内容：</p>\n<pre><code class=\"javascript\">&lt;script type=&quot;text/javascript&quot;&gt;\n//只在桌面版网页启用特效\nvar windowWidth = $(window).width();\nif (windowWidth &gt; 768) {\n    document.write(&#39;&lt;script type=&quot;text/javascript&quot; src=&quot;/js/sakura.js&quot;&gt;&lt;\\/script&gt;&#39;);\n}\n&lt;/script&gt;</code></pre>\n<h3 id=\"添加鼠标彩虹星星掉落跟随效果\"><a href=\"#添加鼠标彩虹星星掉落跟随效果\" class=\"headerlink\" title=\"添加鼠标彩虹星星掉落跟随效果\"></a>添加鼠标彩虹星星掉落跟随效果</h3><p>在<code>themes/matery/source/js</code>目录下新建<code>cursor.js</code>文件，打开<a href=\"https://github.com/axh2018/script/blob/master/cursor.js\" target=\"_blank\" rel=\"noopener\"></a><br>将内容复制粘贴到<code>cursor.js</code>。</p>\n<p>然后在<code>themes/matery/layout/layout.ejs</code>文件内添加以下内容：</p>\n<pre><code class=\"javascript\">&lt;script src=&quot;/js/snow.js&quot;&gt;&lt;/script&gt;</code></pre>\n<h3 id=\"添加雪花飘落效果\"><a href=\"#添加雪花飘落效果\" class=\"headerlink\" title=\"添加雪花飘落效果\"></a>添加雪花飘落效果</h3><p>在<code>themes/matery/source/js</code>目录下新建<code>cursor.js</code>文件，打开<a href=\"https://github.com/axh2018/script/blob/master/snow.js\" target=\"_blank\" rel=\"noopener\">https://github.com/axh2018/script/blob/master/snow.js</a><br>将内容复制粘贴到<code>cursor.js</code>。</p>\n<p>然后在<code>themes/matery/layout/layout.ejs</code>文件内添加以下内容：</p>\n<pre><code class=\"javascript\">&lt;script src=&quot;/js/snow.js&quot;&gt;&lt;/script&gt;</code></pre>\n<h3 id=\"添加鼠标点击文字特效\"><a href=\"#添加鼠标点击文字特效\" class=\"headerlink\" title=\"添加鼠标点击文字特效\"></a>添加鼠标点击文字特效</h3><p>主题文件下的<code>/source/js/</code>下新建<code>click_show_text.js</code>，以下代码添到<code>js</code>中：</p>\n<pre><code class=\"javascript\">var a_idx = 0;\njQuery(document).ready(function ($) {\n    $(&quot;body&quot;).click(function (e) {\n        var a = new Array(&quot;富强&quot;, &quot;民主&quot;, &quot;文明&quot;, &quot;和谐&quot;, &quot;自由&quot;, &quot;平等&quot;, &quot;公正&quot;, &quot;法治&quot;, &quot;爱国&quot;, &quot;敬业&quot;, &quot;诚信&quot;, &quot;友善&quot;);\n        var $i = $(&quot;&lt;span/&gt;&quot;).text(a[a_idx]);\n        a_idx = (a_idx + 1) % a.length;\n        var x = e.pageX,\n            y = e.pageY;\n        $i.css({\n            &quot;z-index&quot;: 5,\n            &quot;top&quot;: y - 20,\n            &quot;left&quot;: x,\n            &quot;position&quot;: &quot;absolute&quot;,\n            &quot;font-weight&quot;: &quot;bold&quot;,\n            &quot;color&quot;: &quot;#FF0000&quot;\n        });\n        $(&quot;body&quot;).append($i);\n        $i.animate({\n                &quot;top&quot;: y - 180,\n                &quot;opacity&quot;: 0\n            },\n            3000,\n            function () {\n                $i.remove();\n            });\n    });\n    setTimeout(&#39;delay()&#39;, 2000);\n});\n\nfunction delay() {\n    $(&quot;.buryit&quot;).removeAttr(&quot;onclick&quot;);\n}</code></pre>\n<h3 id=\"增加建站时间\"><a href=\"#增加建站时间\" class=\"headerlink\" title=\"增加建站时间\"></a>增加建站时间</h3><p>只需将主题的<code>_config.yml</code>中的<code>time</code>设置为<code>true</code>即可：</p>\n<pre><code class=\"yml\"># Website start time.\n# 站点运行开始时间.\ntime:\n  enable: trues\n  year: 2019 # 年份\n  month: 11 # 月份\n  date: 30 # 日期\n  hour: 17 # 小时\n  minute: 30 # 分钟\n  second: 00 # 秒</code></pre>\n<h3 id=\"添加博客天气插件\"><a href=\"#添加博客天气插件\" class=\"headerlink\" title=\"添加博客天气插件\"></a>添加博客天气插件</h3><p>去中国天气网<a><a href=\"https://cj.weather.com.cn/plugin/pc\" target=\"_blank\" rel=\"noopener\">https://cj.weather.com.cn/plugin/pc</a></a>可以获取一段定制的天气代码，将这段代码添加到</p>\n<p> <code>/themes/matery/layout/layout.ejs</code>即可，例如：</p>\n<pre><code class=\"javascript\">&lt;!-- my_weather天气 --&gt;\n    &lt;script type=&quot;text/javascript&quot;&gt;\n        WIDGET = {FID: &#39;QIqG0hDUBi&#39;}\n    &lt;/script&gt;\n    &lt;script type=&quot;text/javascript&quot; src=&quot;https://apip.weatherdt.com/float/static/js/r.js?v=1111&quot;&gt;\n    &lt;/script&gt;</code></pre>\n<h3 id=\"添加live2d模型\"><a href=\"#添加live2d模型\" class=\"headerlink\" title=\"添加live2d模型\"></a>添加live2d模型</h3><p>安装插件：</p>\n<pre><code class=\"bash\">npm install --save hexo-helper-live2d</code></pre>\n<p>安装模型：</p>\n<pre><code class=\"bash\">npm install --save hexo-helper-live2d</code></pre>\n<p>配置：</p>\n<pre><code class=\"yaml\">live2d:\n    enable: true\n    scriptFrom: local\n    pluginRootPath: live2dw/\n    pluginJsPath: lib/\n    pluginModelPath: assets/\n    tagMode: false\n    log: false\n    model:\n        use: live2d-widget-model-shizuku\n    display:\n        position: right\n        width: 150\n        height: 300\n    mobile:\n        show: false\n    react:\n        opacity: 0.7</code></pre>\n<p>其中模型你可以更改，想了解更多，请移步官网<a href=\"https://github.com/EYHN/hexo-helper-live2d/blob/master/README.zh-CN.md\" target=\"_blank\" rel=\"noopener\">https://github.com/EYHN/hexo-helper-live2d/blob/master/README.zh-CN.md</a></p>\n<h3 id=\"背景动态彩带\"><a href=\"#背景动态彩带\" class=\"headerlink\" title=\"背景动态彩带\"></a>背景动态彩带</h3><p>只需将<code>matery/_config.yml</code>中<code>canvas_nest</code>设置为<code>true</code>即可：</p>\n<pre><code class=\"yaml\"># 背景静止彩带.\nribbon:\n  enable: true\n  size: 150 # 彩带大小, 默认: 90.\n  alpha: 0.6 # 彩带透明度 (0 ~ 1), 默认: 0.6.\n  zIndex: -1 # 背景的z-index属性，css属性用于控制所在层的位置, 默认: -1.\n  clickChange: false  # 设置是否每次点击都更换彩带.</code></pre>\n<h3 id=\"背景动态线条\"><a href=\"#背景动态线条\" class=\"headerlink\" title=\"背景动态线条\"></a>背景动态线条</h3><p>只需将<code>matery/_config.yml</code>中<code>ribbon_dynamic</code>设置为<code>true</code>即可：</p>\n<pre><code class=\"yaml\">ribbon_dynamic:\n  enable: true</code></pre>\n<p>注：加载这些样式非常耗资源。</p>\n<h3 id=\"添加反爬虫协议\"><a href=\"#添加反爬虫协议\" class=\"headerlink\" title=\"添加反爬虫协议\"></a>添加反爬虫协议</h3><p>robots是网站跟爬虫间的协议，用简单直接的txt格式文本方式告诉对应的爬虫被允许的权限，也就是说robots.txt是搜索引擎中访问网站的时候要查看的第一个文件。当一个搜索蜘蛛访问一个站点时，它会首先检查该站点根目录下是否存在robots.txt，如果存在，搜索机器人就会按照该文件中的内容来确定访问的范围；如果该文件不存在，所有的搜索蜘蛛将能够访问网站上所有没有被口令保护的页面。</p>\n<p>我们在hexo 根目录下的 <code>public</code> 目录下新建一个<code>robots.txt</code>文件，内容如下：</p>\n<pre><code class=\"txt\">User-agent: *\nAllow: /\nAllow: /archives/\nAllow: /categories/\nAllow: /tags/\nDisAllow: /about/\nDisallow: /friends/\nDisallow: /contact/\nSitemap: https://axh2018.cn/sitemap.xml\nSitemap: https://axh2018.cn/baidu_sitemap.xml</code></pre>\n<p>你可自定义哪些内容可以被爬取，哪些内容不能。</p>\n<p>参考</p>\n<ul>\n<li><a href=\"https://chinatianyunfeng.github.io/posts/63466.html#toc-heading-8\" target=\"_blank\" rel=\"noopener\">https://chinatianyunfeng.github.io/posts/63466.html#toc-heading-8</a></li>\n<li><a href=\"https://yafine-blog.cn/posts/4ab2.html#toc-heading-55\" target=\"_blank\" rel=\"noopener\">https://yafine-blog.cn/posts/4ab2.html#toc-heading-55</a></li>\n<li><a href=\"https://sunhwee.com/posts/6e8839eb.html#toc-heading-37\" target=\"_blank\" rel=\"noopener\">https://sunhwee.com/posts/6e8839eb.html#toc-heading-37</a></li>\n<li><a href=\"https://github.com/blinkfox/hexo-theme-matery\" target=\"_blank\" rel=\"noopener\">https://github.com/blinkfox/hexo-theme-matery</a></li>\n</ul>\n","categories":[{"name":"博客","path":"api/categories/博客.json"}],"tags":[{"name":"Hexo","path":"api/tags/Hexo.json"}]}